(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{479:function(t,e,r){"use strict";r.r(e);var a=r(34),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"hyperloglog"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[t._v("#")]),t._v(" hyperloglog")]),t._v(" "),r("h2",{attrs:{id:"介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("一天内有多少用户访问了我的主页，类似这种要去重计数的功能是非常常见的需求，在redis中提供了HyperLogLog的数据结构来支持这类去重计数需求。")]),t._v(" "),r("p",[t._v("命令")]),t._v(" "),r("p",[t._v("pfadd key element 向key的计数中加入一个元素")]),t._v(" "),r("p",[t._v("pfcount key查看元素去重计数")]),t._v(" "),r("p",[t._v("优点: 空间少，单个计数key只使用12kB，O(1)时间复杂度\n缺点：有一定0.81%的误差，不能判断是否在集合中。")]),t._v(" "),r("p",[t._v("操作时间复杂度，pfadd每个element O(1)，redis单机qps 11w左右，pipeline 100 batch 100w qps左右。")]),t._v(" "),r("h2",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),r("p",[t._v("对传入的key进行hash。用hash左边的14bit选择要用的bucket。\n后边50bit统计从最右向左最多有多少个连续的0，如果比当前bucket中的数值大，记录到对应的bucket中，每个bucket只需要6bit（2的6次方>50)")]),t._v(" "),r("p",[t._v("统计总的次数时，通过各个桶中的数值通过公式得出结果。")]),t._v(" "),r("p",[t._v("所以hyperloglog每个key只需要 16384 * 6 / 8 = 12KB。")]),t._v(" "),r("p",[t._v("hyperloglog利用概率方式，通过连续0的bit数量，预估出计数的次数（重复element计数不会对最大连续0bit造成影响）。\n不同元素的计数数量越多，连续为0的数量就越大。并且为了避免个别数据case的影响，使用了16384个分桶，来分别计数。")]),t._v(" "),r("h2",{attrs:{id:"其他方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他方案"}},[t._v("#")]),t._v(" 其他方案")]),t._v(" "),r("ul",[r("li",[t._v("bitmap，可以用于记录long类型数据，比如用户id，一亿数据约100MB，可以通过区间分片等方式横向扩容。")]),t._v(" "),r("li",[t._v("string，适用于更通用的数据去重计数，单独找一个去重缓存和计数缓存，内存使用量比较大，适用于数据量不大的场景。")])]),t._v(" "),r("h2",{attrs:{id:"参考文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://engineering.fb.com/2018/12/13/data-infrastructure/hyperloglog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HyperLogLog in Presto: A significantly faster way to handle cardinality estimation"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://redis.io/docs/data-types/hyperloglogs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("hyperloglog"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);