(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{618:function(e,s,a){"use strict";a.r(s);var t=a(34),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"在2024年使用clion编译、debug、开发java虚拟机-mac版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在2024年使用clion编译、debug、开发java虚拟机-mac版本"}},[e._v("#")]),e._v(" 在2024年使用Clion编译、debug、开发Java虚拟机(Mac版本)")]),e._v(" "),a("h2",{attrs:{id:"目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[e._v("#")]),e._v(" 目的")]),e._v(" "),a("p",[e._v("有时候我们想看一些jdk的原理，比如某个gc参数的作用是什么，在网上可能查不到准确详细的资料，我会更习惯亲自debug jdk查看代码运行结果。")]),e._v(" "),a("p",[e._v("在之前我也总结过jdk的编译debug方法，不过之前的方法不是很好用，比如有很多方法字段定义无法跳转，今天我们来学习\n一下最新的jdk构建debug开发方法，完美而且优雅。")]),e._v(" "),a("h2",{attrs:{id:"下载代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载代码"}},[e._v("#")]),e._v(" 下载代码")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone git@github.com:JetBrains/JetBrainsRuntime.git\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[e._v("#")]),e._v(" 编译")]),e._v(" "),a("p",[e._v("为了构建虚拟机、以及debug调试，需要对代码进行编译。")]),e._v(" "),a("h3",{attrs:{id:"编译依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译依赖"}},[e._v("#")]),e._v(" 编译依赖")]),e._v(" "),a("p",[e._v("编译依赖Xcode，通过AppStore搜索下载安装就可以。\n安装完成后执行下")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("编译jdk需要一个jdk作为boot jdk，先到"),a("a",{attrs:{href:"https://www.oracle.com/java/technologies/downloads/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jdk官网"),a("OutboundLink")],1),e._v(" 下载安装和当前版本相同（或低一两个版本）的jdk。")]),e._v(" "),a("p",[e._v("比如当前的是jdk20，则允许的boot jdk版本是18 19 20")]),e._v(" "),a("p",[e._v("然后安装编译需要的一些依赖包")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("brew install autoconf freetype ccache\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"开始编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始编译"}},[e._v("#")]),e._v(" 开始编译")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#首先cd到代码目录中\ncd jdk\n# 进行configure\nbash configure --with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --with-num-cores=8 --with-memory-size=8000 --disable-warnings-as-errors\n# 进行make，这个过程稍久一些\nmake\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("如果提示This might be fixed by explicitly setting --with-boot-jdk (Your Boot JDK version must be one of: 18 19 20)，则bash configure增加--with-boot-jdk参数配置成自己的jdk的路径，\n比如我的Java Home是/Library/Java/JavaVirtualMachines/jdk-18.0.1.1.jdk/Contents/Home\n则configure命令如下")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v(" configure --with-debug-level"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("slowdebug --enable-dtrace --with-jvm-variants"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("server --with-target-bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("64")]),e._v(" --with-num-cores"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" --with-memory-size"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(" --disable-warnings-as-errors --with-boot-jdk"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/Library/Java/JavaVirtualMachines/jdk-18.0.1.1.jdk/Contents/Home\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("make成功")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/openjdkmake.png",height:"300"}}),e._v(" "),a("p",[e._v("通过调用java -version验证下build出来jdk")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("./build/macosx-x86_64-server-slowdebug/jdk/bin/java -version\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"img.png","data-src":"/assets/images/jvm/jdk/openjdkversion.png",loading:"lazy"}}),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/openjdkversion.png",height:"100"}})]),e._v(" "),a("h2",{attrs:{id:"导入ide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入ide"}},[e._v("#")]),e._v(" 导入IDE")]),e._v(" "),a("p",[e._v("目前JDK可以compile-commands导入，在项目文件夹执行")]),e._v(" "),a("p",[e._v("openjdk中的代码包含了Java(jdk各种jar包)和C++(hotspot虚拟机部分)，本文主要针对hotspot部分。\n现代化的IDE是阅读、开发、调试代码的好工具，这里推荐使用Jetbrains公司(也是开发IntelliJ Idea的)提供的"),a("a",{attrs:{href:"https://www.jetbrains.com/clion/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CLion"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("调用"),a("code",[e._v("make compile-commands")]),e._v("，为Clion生成compile_commands.json文件")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" compile-commands\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("执行完这条命令后会在build目录下的构建出来的文件里生成一个compile_commands.json文件。")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/open-compile-commands.png",height:"300"}}),e._v(" "),a("p",[e._v("打开CLion，点击File -> Open打开这个compile_commands.json文件，选择Open as Project。")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/compile-commands-open-as-project.png",height:"100"}}),e._v(" "),a("p",[e._v("打开项目后，通过CLion的Tools -> Complilation Database -> Change Project Root 更换项目的root为jdk代码的根目录")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/change-project-root.png",height:"100"}}),e._v(" "),a("p",[e._v("然后就可以在CLion中愉快的进行函数、字段跳转了。")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/clion-jump.png",height:"100"}}),e._v(" "),a("h3",{attrs:{id:"clion-debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clion-debug"}},[e._v("#")]),e._v(" CLion debug")]),e._v(" "),a("p",[e._v("下面我们要在CLion中运行、debug jdk。")]),e._v(" "),a("p",[e._v("在CLion中通过快捷键Command + 逗号，打开Preference，在Build, Execution, Deploy -> Custom Build Targets\n中，添加一个新的Custom Build Target, Name填macosx-x86_64-server-slowdebug，")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/custom-build-target.png",height:"300"}}),e._v(" "),a("p",[e._v("然后点击Build 右边的三个点的按钮，添加一个External Tools。")]),e._v(" "),a("p",[e._v("Name 填make macosx-x86_64-server-slowdebug, Program填make, Argument填CONF=macosx-x86_64-server-slowdebug,\nWorking directory选择jdk代码根目录。")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/make-target.png",height:"400"}}),e._v(" "),a("p",[e._v("然后clean也是类似的配置，Argument填CONF=macosx-x86_64-server-slowdebug clean")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/clean-target.png",height:"400"}}),e._v(" "),a("p",[e._v("然后点击Apply, Ok。")]),e._v(" "),a("p",[e._v("点击Add Configuration")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/addconfiguration-button.png",height:"100"}}),e._v(" "),a("p",[e._v("添加一个Custom Build Application, Name 改成debug jdk, Target会自动选择我们刚创建的macosx-x86_64-server-slowdebug，\nExecutable选择构建出来build文件夹里的macosx-x86_64-server-slowdebug/jdk/bin/java")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/addconfiguration.png",height:"300"}}),e._v(" "),a("h4",{attrs:{id:"解决sigsegv问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决sigsegv问题"}},[e._v("#")]),e._v(" 解决sigsegv问题")]),e._v(" "),a("p",[e._v("在jdk源码根文件目录内，创建一个.lldbinit文件，内容为")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('br set -n main -o true -G true -C "pro hand -p true -s false SIGSEGV SIGBUS"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("然后在创建一个 ~/.lldbinit文件(也就是在home文件夹下创建.lldbinit文件)，内容为")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("settings set target.load-cwd-lldbinit true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[e._v("#")]),e._v(" debug")]),e._v(" "),a("p",[e._v("然后在arguments.cpp文件中添加几个断点，点击debug，就能构建运行并停在我们设置的断点上。")]),e._v(" "),a("p",[e._v("跳过断点后，可以看到熟悉的java -version的结果")]),e._v(" "),a("img",{attrs:{src:"/assets/images/jvm/jdk/javaversion.png",height:"150"}}),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("上述部分就是编译、debug、开发openjdk的方法，授人以鱼不如授人以渔，有了这些方法就可以更方便的查看实现以及排查问题了。\n但是最后也要提醒大家不忘初心、不要过于沉溺于底层实现、不要盲目崇拜开发虚拟机认为是什么高深莫测的工作。这里引用"),a("a",{attrs:{href:"http://www.yinwang.org/blog-cn/2019/12/24/compilers",target:"_blank",rel:"noopener noreferrer"}},[e._v("王垠"),a("OutboundLink")],1),e._v("的一段话")]),e._v(" "),a("blockquote",[a("p",[e._v("每当有人向我表示编译器高深莫测，向往却又高攀不上，我都会给他打一个比方：做编译器就像做菜刀。你可以做出非常好的菜刀，然而你终究只是一个铁匠。铁匠不知道如何用这菜刀做出五花八门，让人心旷神怡，米其林级别的菜肴，因为那是大厨的工作。要做菜还是要打铁，那是你自己的选择，并没有贵贱之分。")])]),e._v(" "),a("h2",{attrs:{id:"其他参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他参考"}},[e._v("#")]),e._v(" 其他参考")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.jetbrains.com/clion/2020/03/openjdk-with-clion/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tips & Tricks: Develop OpenJDK in CLion with Pleasure"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);