(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{719:function(t,a,i){"use strict";i.r(a);var n=i(34),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"innodb"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[t._v("#")]),t._v(" innodb")]),t._v(" "),i("h3",{attrs:{id:"durability"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#durability"}},[t._v("#")]),t._v(" Durability")]),t._v(" "),i("h1",{attrs:{id:"innodb-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#innodb-2"}},[t._v("#")]),t._v(" InnoDB")]),t._v(" "),i("h2",{attrs:{id:"acid"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),i("p",[t._v("ACID 是数据库事务的四个关键属性，确保事务的可靠性和数据的一致性。")]),t._v(" "),i("h3",{attrs:{id:"atomicity-原子性"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#atomicity-原子性"}},[t._v("#")]),t._v(" Atomicity (原子性)")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("定义")]),t._v("：原子性指事务整体是一个不可分割的原子操作，事务中的操作要么全部完成，要么全部不执行。")]),t._v(" "),i("li",[i("strong",[t._v("实现")]),t._v("：\n"),i("ul",[i("li",[t._v("InnoDB 通过日志文件（redo log 和 undo log）来实现原子性。")]),t._v(" "),i("li",[t._v("当事务提交时，InnoDB 会先将事务的操作记录到 redo log 中，确保数据的持久性。")]),t._v(" "),i("li",[t._v("如果事务失败，InnoDB 会使用 undo log 来回滚事务，撤销已执行的操作。")])])])]),t._v(" "),i("h3",{attrs:{id:"consistency-一致性"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#consistency-一致性"}},[t._v("#")]),t._v(" Consistency (一致性)")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("定义")]),t._v("：一致性保证事务的执行结果必须使数据库从一个一致状态转换到另一个一致状态，即事务执行前后，数据库的完整性约束不会被破坏。")]),t._v(" "),i("li",[i("strong",[t._v("实现")]),t._v("：\n"),i("ul",[i("li",[t._v("InnoDB 通过事务的隔离级别和约束检查来实现一致性。")]),t._v(" "),i("li",[t._v("例如，如果一个系统要求用户的账户余额不能为负数，那么任何减少账户余额的操作都必须确保余额不低于零。")])])])]),t._v(" "),i("h3",{attrs:{id:"isolation-隔离性"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#isolation-隔离性"}},[t._v("#")]),t._v(" Isolation (隔离性)")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("定义")]),t._v("：隔离性确保并发执行的多个事务之间互不影响。每个事务在执行过程中看起来就像是系统中唯一的活动。")]),t._v(" "),i("li",[i("strong",[t._v("实现")]),t._v("：\n"),i("ul",[i("li",[t._v("InnoDB 提供了不同的隔离级别，包括读未提交（Read Uncommitted）、读已提交（Read Committed）、可重复读（Repeatable Read）和序列化（Serializable）。")]),t._v(" "),i("li",[t._v("隔离级别越高，并发度越低，但数据的一致性越好。")]),t._v(" "),i("li",[t._v("例如，在可重复读级别下，事务可以多次读取同一数据，结果始终保持一致。")])])])]),t._v(" "),i("h3",{attrs:{id:"durability-持久性"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#durability-持久性"}},[t._v("#")]),t._v(" Durability (持久性)")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("定义")]),t._v("：持久性指事务提交后，它对数据库的更改就是永久性的，不会因为系统故障而丢失。")]),t._v(" "),i("li",[i("strong",[t._v("实现")]),t._v("：\n"),i("ul",[i("li",[t._v("InnoDB 通过 redo log 来实现持久性。")]),t._v(" "),i("li",[t._v("当事务提交时，InnoDB 会将事务的操作记录到 redo log 中，并确保这些记录被写入磁盘。")]),t._v(" "),i("li",[t._v("即使系统发生故障，InnoDB 也可以通过 redo log 恢复未完成的事务，确保数据的完整性和一致性。")])])])]),t._v(" "),i("h2",{attrs:{id:"总结"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),i("p",[t._v("通过上述四个属性，InnoDB 确保了事务的可靠性和数据的一致性。每个属性都有其特定的实现机制，共同协作以提供高性能和高可靠性的数据库服务。")])])}),[],!1,null,null,null);a.default=r.exports}}]);