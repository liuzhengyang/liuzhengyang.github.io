(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{516:function(t,r,a){"use strict";a.r(r);var e=a(34),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"design-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design-pattern"}},[t._v("#")]),t._v(" design pattern")]),t._v(" "),a("p",[t._v("设计模式使用得当，确实可以让代码更加易于维护。易扩展易维护。")]),t._v(" "),a("h2",{attrs:{id:"策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[t._v("#")]),t._v(" 策略模式")]),t._v(" "),a("p",[t._v("策略模式，定义策略的通用接口。\n对策略名和策略进行映射，在运行时选择策略，调用接口。")]),t._v(" "),a("h2",{attrs:{id:"职责链模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式"}},[t._v("#")]),t._v(" 职责链模式")]),t._v(" "),a("p",[t._v("将一系列策略通过链表进行串联，依次通过链表中的策略进行处理。")]),t._v(" "),a("h2",{attrs:{id:"原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原则"}},[t._v("#")]),t._v(" 原则")]),t._v(" "),a("ol",[a("li",[t._v("开闭原则：对扩展开放，对修改关闭。")]),t._v(" "),a("li",[t._v("单一职责原则：一个类只做一件事。")]),t._v(" "),a("li",[t._v("里氏替换原则：子类可以扩展父类的功能，但不能改")]),t._v(" "),a("li",[t._v("接口隔离原则：使用多个专门的接口，而不是一个总接口")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://refactoring.guru/design-patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://refactoring.guru/design-patterns"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://java-design-patterns.com/patterns/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://java-design-patterns.com/patterns/"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=s.exports}}]);