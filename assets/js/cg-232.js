(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{663:function(s,a,n){"use strict";n.r(a);var t=n(34),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"jvmti介绍和开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jvmti介绍和开发"}},[s._v("#")]),s._v(" jvmti介绍和开发")]),s._v(" "),n("p",[s._v("本篇文章将介绍一下JVMTI的基本功能，并开发一个简单的JVMTI工具。")]),s._v(" "),n("h2",{attrs:{id:"jvmti是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jvmti是什么"}},[s._v("#")]),s._v(" JVMTI是什么")]),s._v(" "),n("p",[s._v("JVMTI是JVM Tool Interface的缩写，即JVM的工具接口。\n通过JVMTI可以用来实现profiling性能分析、debugging、监控、线程分析、覆盖率分析等工具。\n接口提供的功能分为几大类，包括了class、线程、Heap内存的查询、操作等等。\n这样可以在不改动代码的情况下监控、分析java进程的状态等。\njavaagent也常用来实现类似的功能，不过javaagent对应的Instrumentation接口的功能相对有限，可以通过JVMTI获取更多底层功能。")]),s._v(" "),n("h2",{attrs:{id:"开发一个简单的jvmti工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开发一个简单的jvmti工具"}},[s._v("#")]),s._v(" 开发一个简单的JVMTI工具")]),s._v(" "),n("p",[s._v("JVMTI有两种启动方式。\n一种是在Java进程启动的时候通过"),n("code",[s._v("-agentpath:<path-to-agent>=<options>")]),s._v("的方式启动，path-to-agent是对应的jvmti接口实现的so动态库文件的绝对路径，后面可以追加jvmti程序需要的参数。\n另一种方式是运行时attach，然后加载jvmti实现的动态库文件。\n为了学习JVMTI，我们编写一个打印当前所有已经加载的类的工具，熟悉下整个开发使用流程。")]),s._v(" "),n("h3",{attrs:{id:"创建一个c-项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建一个c-项目"}},[s._v("#")]),s._v(" 创建一个C++项目")]),s._v(" "),n("p",[s._v("在Clion中，选择Create C++ executable，然后修改CMakeLists.txt\n增加如下几行，来加入jvmti.h文件的依赖")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("include_directories(${JAVA_INCLUDE_PATH})\ninclude_directories(${JAVA_INCLUDE_PATH2})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("然后创建一个cpp文件，命名为jvmti_example.cpp，并在CMakeLists.txt中添加")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("SET(LIB_SRC jvmti_example.cpp)\nADD_LIBRARY(jvmti_example SHARED ${LIB_SRC})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("编写jvmti_example.cpp，实现Agent_OnLoad、Agent_OnAttach、Agent_OnUnload。\nOnLoad会在通过命令行参数方式启动时调用，OnAttach在attach到目标进程加载时调用，OnUnload在agent被卸载时调用。\n我们在attach之后打印出当前所有已经加载的类的签名")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include <iostream>\n#include "jvmti.h"\n\njint printLoadedClasses(JavaVM *vm);\n\nJNIEXPORT jint JNICALL\nAgent_OnLoad(JavaVM *vm, char *options, void *reserved) {\n    std::cout << "Agent OnLoad" << std::endl;\n    return 0;\n}\n\njint JNICALL\nAgent_OnAttach(JavaVM *vm, char *options, void *reserved) {\n    std::cout << "Agent OnAttach" << std::endl;\n    return printLoadedClasses(vm);\n}\n\nJNIEXPORT void JNICALL\nAgent_OnUnload(JavaVM *vm) {\n    std::cout << "Agent OnUnload" << std::endl;\n}\n\nJNIEXPORT jint printLoadedClasses(JavaVM *vm) {\n    jvmtiEnv *jvmti;\n\n    jint result = vm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_2);\n    if (result != JNI_OK) {\n        std::cout << "Unable to access jvm env" << std::endl;\n        return result;\n    }\n\n    jclass *classes;\n    jint count;\n    result = jvmti->GetLoadedClasses(&count, &classes);\n    if (result != JNI_OK) {\n        std::cout << "JVMTI GetLoadedClasses failed" << std::endl;\n        return result;\n    }\n\n    for (int i = 0; i < count; i++) {\n        char *sig;\n        char *genericSig;\n        jvmti->GetClassSignature(classes[i], &sig, &genericSig);\n        std::cout << "class signature = " << sig << std::endl;\n    }\n\n    return 0;\n}\n\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br")])]),n("h3",{attrs:{id:"编译写好的cpp文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译写好的cpp文件"}},[s._v("#")]),s._v(" 编译写好的cpp文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("mkdir build\ncd build\ncmake ..\nmake\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("然后可以在build文件夹内看到生成的动态库文件，例如在osx系统下是一个"),n("code",[s._v("libjvmti_example.dylib")]),s._v("的文件。")]),s._v(" "),n("h3",{attrs:{id:"测试刚才创建出来的jvmti程序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试刚才创建出来的jvmti程序"}},[s._v("#")]),s._v(" 测试刚才创建出来的JVMTI程序")]),s._v(" "),n("p",[s._v("编写一个简单的Java代码, 并通过javac Test.java生成class文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class Test {\n    public static void main(String[] args) throws Exception {\n        while (true) {\n            say();\n            Thread.sleep(1000);\n        }\n    }\n\n    public static void say() {\n        System.out.println("Hello");\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"命令行启动参数方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命令行启动参数方式"}},[s._v("#")]),s._v(" 命令行启动参数方式")]),s._v(" "),n("p",[s._v("通过"),n("code",[s._v("java -agentpath:动态库绝对路径")])]),s._v(" "),n("p",[s._v("例如")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("java -agentpath:/Users/liuzhengyang/CLionProjects/jvmti_examples/build/libjvmti_example.dylib Test\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("然后可以在标准输出中看到"),n("code",[s._v("Agent OnLoad")]),s._v("的输出。")]),s._v(" "),n("h4",{attrs:{id:"动态attach方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态attach方式"}},[s._v("#")]),s._v(" 动态attach方式")]),s._v(" "),n("p",[s._v("然后使用动态attach的方式加载jvmti程序，先编写一个Java版本的attach工具，其中attach方法的第一个参数是目标进程pid，第二个参数是动态库的绝对路径，第三个参数是agent的参数，当前这个例子不需要参数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import com.sun.tools.attach.VirtualMachine;\n\n/**\n * @author liuzhengyang\n * Make something people want.\n * 2020/4/19\n */\npublic class AgentAttacher {\n    public static void main(String[] args) {\n        attach(pid, "/Users/liuzhengyang/CLionProjects/jvmti_examples/build/libjvmti_example.dylib", "");\n    }\n\n    public static void attach(String pid, String agentPath, String agentArgs) {\n        try {\n            VirtualMachine virtualMachine = VirtualMachine.attach(pid);\n            virtualMachine.loadAgentPath(agentPath, agentArgs);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("运行这个attach工具，可以在标准输出中看到Agent OnAttach和当前已经加载的类的结果\n"),n("img",{staticClass:"lazy",attrs:{alt:"jvmti_attach_output","data-src":"/assets/images/jvm/jvmti/jvmti_attach_output.png",loading:"lazy"}})]),s._v(" "),n("p",[s._v("完整源码在: https://github.com/liuzhengyang/jvmti_examples")])])}),[],!1,null,null,null);a.default=e.exports}}]);