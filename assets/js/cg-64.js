(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{495:function(e,s,a){"use strict";a.r(s);var n=a(34),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"redis过期策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis过期策略"}},[e._v("#")]),e._v(" Redis过期策略")]),e._v(" "),a("p",[e._v("在redis中，我们可以在保存数据时指定过期时间，比如通过set命令的EX/PX等选项参数或者通过expire/expireat等命令设定某个key的过期时间。")]),e._v(" "),a("p",[e._v("过期机制主要用于实现几个目的")]),e._v(" "),a("ol",[a("li",[e._v("利用过期机制实现一些时间相关的功能，比如限速器、时间段计数器等")]),e._v(" "),a("li",[e._v("redis的内存容量有限，通过设置过期时间，不经常使用的数据能够自动清理，为其他数据留出可用内存。")])]),e._v(" "),a("h2",{attrs:{id:"过期机制的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过期机制的实现"}},[e._v("#")]),e._v(" 过期机制的实现")]),e._v(" "),a("p",[e._v("那么redis是如何实现过期的呢？")]),e._v(" "),a("h3",{attrs:{id:"过期数据存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过期数据存储"}},[e._v("#")]),e._v(" 过期数据存储")]),e._v(" "),a("p",[e._v("如果保存数据时设置了过期参数或者通过调用expire命令，\nredis中除了数据的dict（即map），还有一个expires表保存过期信息，key是对应要过期的key，value是要过期的绝对时间。")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* Redis database representation. There are multiple databases identified\n * by integers from 0 (the default database) up to the max configured\n * database. The database number is the 'id' field in the structure. */\ntypedef struct redisDb {\n    dict *dict;                 /* The keyspace for this DB */\n    dict *expires;              /* Timeout of keys with a timeout set */\n    dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/\n    dict *ready_keys;           /* Blocked keys that received a PUSH */\n    dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */\n    int id;                     /* Database ID */\n    long long avg_ttl;          /* Average TTL, just for stats */\n    unsigned long expires_cursor; /* Cursor of the active expire cycle. */\n    list *defrag_later;         /* List of key names to attempt to defrag one by one, gradually. */\n    clusterSlotToKeyMapping *slots_to_keys; /* Array of slots to keys. Only used in cluster mode (db 0). */\n} redisDb;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* Set an expire to the specified key. If the expire is set in the context\n * of an user calling a command 'c' is the client, otherwise 'c' is set\n * to NULL. The 'when' parameter is the absolute unix time in milliseconds\n * after which the key will no longer be considered valid. */\nvoid setExpire(client *c, redisDb *db, robj *key, long long when) {\n    dictEntry *kde, *de;\n\n    /* Reuse the sds from the main dict in the expire dict */\n    kde = dictFind(db->dict,key->ptr);\n    serverAssertWithInfo(NULL,key,kde != NULL);\n    de = dictAddOrFind(db->expires,dictGetKey(kde));\n    dictSetSignedIntegerVal(de,when);\n\n    int writable_slave = server.masterhost &amp;&amp; server.repl_slave_ro == 0;\n    if (c &amp;&amp; writable_slave &amp;&amp; !(c->flags &amp; CLIENT_MASTER))\n        rememberSlaveKeyWithExpire(db,key);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br")])]),a("h3",{attrs:{id:"过期删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过期删除"}},[e._v("#")]),e._v(" 过期删除")]),e._v(" "),a("p",[e._v("redis删除过期key有两种时机\n第一个时机是在访问这个key的时候（比如查询、要修改等情况），如果发现过期时间已过，则会进行删除。这也称为lazy惰性删除。\n如下代码中expireIfNeeded会判断key的过期时间，如果过期会进行删除，删除分为同步删除和异步删除。")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("robj *lookupKey(redisDb *db, robj *key, int flags) {\n    dictEntry *de = dictFind(db->dict,key->ptr);\n    robj *val = NULL;\n    if (de) {\n        val = dictGetVal(de);\n        /* Forcing deletion of expired keys on a replica makes the replica\n         * inconsistent with the master. We forbid it on readonly replicas, but\n         * we have to allow it on writable replicas to make write commands\n         * behave consistently.\n         *\n         * It's possible that the WRITE flag is set even during a readonly\n         * command, since the command may trigger events that cause modules to\n         * perform additional writes. */\n        int is_ro_replica = server.masterhost &amp;&amp; server.repl_slave_ro;\n        int force_delete_expired = flags &amp; LOOKUP_WRITE &amp;&amp; !is_ro_replica;\n        if (expireIfNeeded(db, key, force_delete_expired)) {\n            /* The key is no longer valid. */\n            val = NULL;\n        }\n    }\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br")])]),a("p",[e._v("第二个时机是redis会定时扫描expires表，清理过期的key，这个会运行在redis的主线程中。")]),e._v(" "),a("ol",[a("li",[e._v("每秒进行10次扫描")]),e._v(" "),a("li",[e._v("每次从过期字典中随机20个key")]),e._v(" "),a("li",[e._v("删除20个key钟已经过期的key")]),e._v(" "),a("li",[e._v("如果过期的key比例超过1/4，重复步骤2")])]),e._v(" "),a("p",[e._v("为了避免扫描任务过多导致redis线程卡主不能响应用户请求，redis对扫描时间做了25ms的限制。")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* Check the set of keys created by the master with an expire set in order to\n * check if they should be evicted. */\nvoid expireSlaveKeys(void) {\n    if (slaveKeysWithExpire == NULL ||\n        dictSize(slaveKeysWithExpire) == 0) return;\n\n    int cycles = 0, noexpire = 0;\n    mstime_t start = mstime();\n    while(1) {\n        dictEntry *de = dictGetRandomKey(slaveKeysWithExpire);\n        sds keyname = dictGetKey(de);\n        uint64_t dbids = dictGetUnsignedIntegerVal(de);\n        uint64_t new_dbids = 0;\n\n        /* Check the key against every database corresponding to the\n         * bits set in the value bitmap. */\n        int dbid = 0;\n        while(dbids &amp;&amp; dbid &lt; server.dbnum) {\n            if ((dbids &amp; 1) != 0) {\n                redisDb *db = server.db+dbid;\n                dictEntry *expire = dictFind(db->expires,keyname);\n                int expired = 0;\n\n                if (expire &amp;&amp;\n                    activeExpireCycleTryExpire(server.db+dbid,expire,start))\n                {\n                    expired = 1;\n                }\n\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br")])]),a("h3",{attrs:{id:"大量key同一时间过期的风险"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大量key同一时间过期的风险"}},[e._v("#")]),e._v(" 大量key同一时间过期的风险")]),e._v(" "),a("p",[e._v("虽然上面的扫描过期key做了时间限制，但是也只是限制单次的时间，而不是整体redis一段时间内扫描过期key的时间，所以\n如果同一时间出现大量的key过期，还是会影响用户的redis请求。\n所以在业务系统设计时，对于key的过期时间如果可能有大量key同时过期，需要在key的过期时间加上一定的随机，避免同时过期的风险。")]),e._v(" "),a("h3",{attrs:{id:"master-slave同步如何处理过期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master-slave同步如何处理过期"}},[e._v("#")]),e._v(" master slave同步如何处理过期")]),e._v(" "),a("p",[e._v("从库不会进行过期扫描，是通过主库key过期时的删除命令同步到从库实现从库数据过期的。\n如果主从切换时有删除命令没有同步到从库，则可能导致主从数据不一致。")]),e._v(" "),a("h3",{attrs:{id:"set修改key后会清理过期时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set修改key后会清理过期时间"}},[e._v("#")]),e._v(" set修改key后会清理过期时间")]),e._v(" "),a("p",[e._v("在调用set修改key的值时，如果没有传入过期时间，则会清理掉之前的过期时间（如果有）")])])}),[],!1,null,null,null);s.default=t.exports}}]);