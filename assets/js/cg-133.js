(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{563:function(a,s,t){"use strict";t.r(s);var n=t(34),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java动态代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java动态代理"}},[a._v("#")]),a._v(" Java动态代理")]),a._v(" "),t("p",[a._v("你了解Java中的动态代理的作用是什么吗？动态代理又有哪些实现方式，真正的实现原理是什么呢？\n掌握本章内容，在面试遇到aop如何实现的问题时，就不会只知道jdk代理接口和cglib集成子类、不知道真正的实现原理了。")]),a._v(" "),t("p",[a._v("本文将会讲解动态代理技术能够解决的问题、如何自己设计实现动态代理、以及Java中是如何实现的以及一些开源框架中的典型应用。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"picture 2","data-src":"/assets/images/java/627153892e0b6dccc954114b79050d548f8c5d59a23f9b2a228ac99919fca9a0.png",loading:"lazy"}})]),a._v(" "),t("h2",{attrs:{id:"dynamic-proxy是什么-可以用来做什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-proxy是什么-可以用来做什么"}},[a._v("#")]),a._v(" dynamic proxy是什么，可以用来做什么？")]),a._v(" "),t("p",[a._v("通过dynamic proxy动态代理，我们可以在运行为接口创建实现类，或为特定类进行功能增强（aop功能）。常用在框架实现中，在retrofit、spring、dubbo中都大量使用了动态代理技术，框架并不能提前知道用户编写的类是什么样的，而通过动态代理，可以在运行时进行实现接口或增强用户类。")]),a._v(" "),t("p",[a._v("举一些实际的例子。\n例如在retrofit(一种Http调用框架）中，用户通过下面的方式来定义和使用远程http接口。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GitHubService")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@GET")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"users/{user}/repos"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Call")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Repo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("listRepos")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Path")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"user"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("先定义远程的http的接口形式，通过注解标注http method, url, 参数，返回对象等。然后就可以利用Retrofit类传入这个接口获得对象进行调用了。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Retrofit")]),a._v(" retrofit "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Retrofit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Builder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("baseUrl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://api.github.com/"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("build")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GitHubService")]),a._v(" service "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" retrofit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GitHubService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("背后就是使用了动态代理技术来生成这个接口类的实现，在用户调用listRepos方法的时候，封装成http请求进行调用，并把结果反序列化成接口的返回值返回给用户，用户不需要感知这些实现细节，大大减少了使用成本。")]),a._v(" "),t("p",[a._v("如果不用retrofit proxy，需要怎么实现呢?")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Repo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("listRepos")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" url "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://api.github.com/users/%s/repos"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OkHttpClient")]),a._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OkHttpClient")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("newBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("build")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Request")]),a._v(" request "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Builder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"GET"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("build")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Response")]),a._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("newCall")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" body "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JSONUtils")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("jsonToModel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])]),t("p",[a._v("不用retrofit直接用okhttp开发的话，就需要使用者手动拼url、把请求参数构建成Map，调用okhttp接口后，手动把string body反序列化转成业务类对象。\n这样就需要使用者了解底层实现和调用方式，这些额外的细节信息增加了使用成本。使用动态代理则可以屏蔽这些可以由框架实现的细节，让使用者面向接口编程，把更多的精力放在实现业务功能而不是底层细节上。")]),a._v(" "),t("h2",{attrs:{id:"java中动态代理的不同实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java中动态代理的不同实现方式"}},[a._v("#")]),a._v(" Java中动态代理的不同实现方式")]),a._v(" "),t("h3",{attrs:{id:"我们来实现动态代理-该如何实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们来实现动态代理-该如何实现"}},[a._v("#")]),a._v(" 我们来实现动态代理，该如何实现")]),a._v(" "),t("p",[a._v("在Java生态中有多种实现动态代理的方式，在介绍各个实现方案之前，我们不妨想一下，如果我们要来实现这个动态代理功能该如何设计呢？")]),a._v(" "),t("p",[a._v("我们需要先明确动态代理要实现的功能，以为接口创建动态代理为例，动态代理工厂(Proxy工厂)要负责为用户指定的接口类（被Proxy目标类）创建实现类，并且能够让\n用户传入指定的实现(InvocationHandler)，最终在运行时得到一个这个接口类的实现类(Proxy结果类）的对象实例。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"picture 1","data-src":"/assets/images/java/a1aaf17b98847390b40f0bfaab871e7e53f609fbc524989a65572cd17617743d.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("这里的关键点就是，明确我们要生成一个什么样的类，以及怎么在运行时生成这个类。")]),a._v(" "),t("p",[a._v("第一步先定义我们要生成的类的内容，我们要生成的类，需要实现用户定义的接口类，并且实现这个接口的所有方法。实现的方法体内，调用用户传入的InvocationHandler对象处理，并返回对应的结果。")]),a._v(" "),t("p",[a._v("例如我们把InvocationHandler定义为")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface InvocationHandler {\n    Object invoke(Object proxy, Method method, Object[] args)\n            throws Throwable;\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("用户定义的接口类（被Proxy类）为")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Service {\n    String hello();\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("那么我们要生成的代理类ProxyImpl可以是如下的类，构造函数接收InvocationHandler对象，然后在具体的方法中，转发给InvocationHnalder对象处理。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class ProxyImpl implements Service {\n\n    private static Method helloMethod;\n\n    static {\n        try {\n            helloMethod = Service.class.getDeclaredMethod("hello", int.class);\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private final InvocationHandler invocationHandler;\n\n    public ProxyImpl(InvocationHandler invocationHandler) {\n        this.invocationHandler = invocationHandler;\n    }\n\n    @Override\n    public String hello(int arg) {\n        try {\n            return (String) invocationHandler.invoke(this, helloMethod, new Object[]{arg});\n        } catch (Throwable throwable) {\n            throw new RuntimeException(throwable);\n        }\n    }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br")])]),t("p",[a._v("明确了要生成的类的内容，下一步就是该如何实现了。该怎么才能在运行时生成一个具体的类呢？幸好Java的类加载机制提供了这种可能，Java中具备在运行时加载类的能力，我们所需要做的就是在运行时生成这个类的class文件字节码。")]),a._v(" "),t("p",[a._v("class文件格式在Java虚拟机规范(https://docs.oracle.com/javase/specs/jvms/)中有的明确详细介绍，我们按照规范拼出对应的字节码就可以了。\n自己拼字节码繁琐且容易出错（就像写机器码），我们可以利用asm、bytebuddy等字节码工具来提高效率减少错误（就像用汇编）。\n除了拼字节码还有一种方式是拼好源代码然后使用Java编译器编译源代码到字节码，我们可以使用"),t("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/module-summary.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("java compiler api"),t("OutboundLink")],1),a._v("或"),t("a",{attrs:{href:"https://www.javassist.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("javassist"),t("OutboundLink")],1),a._v("来实现。")]),a._v(" "),t("p",[a._v("最终得到需要的类的字节码后，再使用classloader来进行加载就可以得到一个可以使用的class对象了，最后利用反射创建对应类的实例对象返回给用户。")]),a._v(" "),t("h3",{attrs:{id:"java中的不同动态代理的实现和以及各自优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java中的不同动态代理的实现和以及各自优缺点"}},[a._v("#")]),a._v(" Java中的不同动态代理的实现和以及各自优缺点")]),a._v(" "),t("p",[a._v("在Java生态中，大家常用的动态代理的方式有jdk proxy和cglib，这两种方式提供了直接的接口。javassist，asm是更底层通用的字节码层面操作工具，它们也能实现对等的功能。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("实现方案")]),a._v(" "),t("th",[a._v("优点")]),a._v(" "),t("th",[a._v("缺点")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("jdk proxy")]),a._v(" "),t("td",[a._v("jdk自带实现，无需外部依赖")]),a._v(" "),t("td",[a._v("只能支持接口的代理")])]),a._v(" "),t("tr",[t("td",[a._v("cglib")]),a._v(" "),t("td",[a._v("能够支持普通类的代理，并能够实现aop等功能")]),a._v(" "),t("td",[a._v("需要cglib依赖")])]),a._v(" "),t("tr",[t("td",[a._v("javassist,asm")]),a._v(" "),t("td",[a._v("可以不在编译期依赖，在运行时使用(通过javaagent或attach)，来实现类似框架监控、日志、tracing等能力")]),a._v(" "),t("td",[a._v("比较底层，需要单独开发aop这种功能")])])])]),a._v(" "),t("h3",{attrs:{id:"jdk-proxy的实现的详细分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-proxy的实现的详细分析"}},[a._v("#")]),a._v(" jdk proxy的实现的详细分析")]),a._v(" "),t("p",[a._v("最后我们以jdk proxy为例，结合代码看一下具体的实现。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"picture 3","data-src":"/assets/images/java/c21d64fecfb53984f4f37eb8209cb7b5e44b9752021f6903ed6b8d8f7ccc5a3c.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("我们顺着jdk proxy的方法入口(java.lang.reflect.Proxy#newProxyInstance)，可以看到Proxy先得到了Constructor，然后利用反射调用Constructor传入InvocationHandler参数得到了代理类实例。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"picture 4","data-src":"/assets/images/java/c19c7373d1a6bec429d536256a650ade5bfc306890a09d2f4d276b287011ebde.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("getProxyConstructor方法中，调用了ProxyBuilder来构建Proxy代理类。")]),a._v(" "),t("p",[a._v("最终生成代理类的函数是java.lang.reflect.ProxyGenerator#generateClassFile。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"picture 5","data-src":"/assets/images/java/2c1602ef9fc1ce9e44c7630196991c019b77cc76e65a114048e7123c15f1cd98.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("generateClassFile做的事情就是我们在前面提到的按照class文件字节码格式要求拼出对应的字节码数组。\n"),t("img",{staticClass:"lazy",attrs:{alt:"picture 6","data-src":"/assets/images/java/4433bf0a97864f719e9a6c58fd888267fe01bb744593a7a513ffa015a06f74ee.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("会针对每个proxy方法创建Method字段，创建静态代码块获取Method，然后创建各个Proxy类的方法的实现。\n"),t("img",{staticClass:"lazy",attrs:{alt:"picture 7","data-src":"/assets/images/java/0fe19d3f570befff18c4617696cacec3097bfc11851558b9100e0a1fbee68e71.png",loading:"lazy"}})]),a._v(" "),t("h2",{attrs:{id:"动态代理在开源框架中的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态代理在开源框架中的应用"}},[a._v("#")]),a._v(" 动态代理在开源框架中的应用")]),a._v(" "),t("p",[a._v("下面分析一下retrofit中对于动态代理的使用。\n如本文最开始的示例，我们通过retrofit.create(GitHubService.class)就可以生成GitHubService这个接口的代理类的对象。")]),a._v(" "),t("p",[a._v("create方法的实现也非常简洁，classloader使用传入接口类的classloader，接口列表使用传入的接口类，invocationHandler的实现是通过method生成调用okhttp的逻辑来调用（对jdk8的default方法进行了特殊处理，因为default方法是用户的实现，不需要代理)。\n"),t("img",{staticClass:"lazy",attrs:{alt:"picture 8","data-src":"/assets/images/java/f902a4e1003427b80aacee56b7e8d8ef322763bdde9b03e53dd8ebfb48f38d2f.png",loading:"lazy"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);