(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{483:function(t,s,n){"use strict";n.r(s);var a=n(34),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"高性能redis客户端lettuce"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高性能redis客户端lettuce"}},[t._v("#")]),t._v(" 高性能redis客户端lettuce")]),t._v(" "),n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/lettuce-io/lettuce-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("lettuce"),n("OutboundLink")],1),t._v("是Redis的Java客户端。\n相比于很多人熟知的"),n("a",{attrs:{href:"https://github.com/redis/jedis",target:"_blank",rel:"noopener noreferrer"}},[t._v("jedis"),n("OutboundLink")],1)]),t._v(" "),n("ul",[n("li",[t._v("lettuce基于netty框架提供了非阻塞响应式异步接口，而jedis只有同步接口，具备异步接口意味着可以方便实现响应式、异步化编程")]),t._v(" "),n("li",[t._v("lettuce也提供了同步的API,即调用对应的Future的wait实现。")]),t._v(" "),n("li",[t._v("lettuce能够实现连接复用，jedis使用连接池模式，连接复用以为着可以减少连接数、能够实现连接上的有序性、能够方便实现jedis里的pipeline功能。")])]),t._v(" "),n("h2",{attrs:{id:"线程模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程模型"}},[t._v("#")]),t._v(" 线程模型")]),t._v(" "),n("p",[t._v("lettuce-epollEventLoop: lettuce使用netty作为io框架，这些线程是配置的netty的event loop group线程，\n负责进行io数据读写。")]),t._v(" "),n("p",[t._v("lettuce-eventExecutorLoop")]),t._v(" "),n("h2",{attrs:{id:"交互流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#交互流程"}},[t._v("#")]),t._v(" 交互流程")]),t._v(" "),n("p",[t._v("发送请求\n通过Channel写入Command，然后将Command记录到一个ArrayDeque中。\nChannel收到消息后，通过channelRead进行decode，decode出来结果，从ArrayDeque中取出对应的command(Future),调用Future.complete完成请求响应结果设置。")]),t._v(" "),n("h3",{attrs:{id:"flushcommands"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flushcommands"}},[t._v("#")]),t._v(" flushCommands")]),t._v(" "),n("p",[t._v("默认情况下，lettuce在发送消息时，会立刻发送网络请求，对应netty的channel的writeAndFlush。\n但是flush是一个开销相对较大的调用，如果有一些常见可以聚合多个请求再统一等待返回，则可以设置autoFlushCommand为false，\n然后再发送完commands后，调用flushCommands。这种方式能够提升吞吐，但是在实际使用时需要小心，详细参考 "),n("a",{attrs:{href:"https://github.com/redis/lettuce/wiki/Pipelining-and-command-flushing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pipelining-and-command-flushing"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("StatefulRedisConnection"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String, String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" connection "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" client.connect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nRedisAsyncCommands"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String, String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" commands "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" connection.async"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// disable auto-flushing\ncommands.setAutoFlushCommands"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// perform a series of independent calls\nList"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("RedisFuture"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("?"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" futures "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Lists.newArrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" iterations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i++"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    futures.add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commands.set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key-"')]),t._v(" + i, "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value-"')]),t._v(" + i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    futures.add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commands.expire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key-"')]),t._v(" + i, "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n// "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" all commands to the transport layer\ncommands.flushCommands"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// synchronization example: Wait "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" all futures complete\nboolean result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LettuceFutures.awaitAll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(", TimeUnit."),n("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("SECONDS")]),t._v(",\n                   futures.toArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new RedisFuture"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("futures.size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// later\nconnection.close"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);