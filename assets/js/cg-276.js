(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{707:function(s,e,n){"use strict";n.r(e);var t=n(34),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"epoll"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[s._v("#")]),s._v(" epoll")]),s._v(" "),n("p",[s._v("epoll是linux提供的IO多路复用机制，通过单个线程实现多个文件描述符的事件等待，而不需要每个文件描述符\n各自一个线程轮训检查状态。")]),s._v(" "),n("h2",{attrs:{id:"关键api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关键api"}},[s._v("#")]),s._v(" 关键API")]),s._v(" "),n("h3",{attrs:{id:"epoll-create1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll-create1"}},[s._v("#")]),s._v(" epoll_create1")]),s._v(" "),n("p",[s._v("epoll_create1创建一个epoll实例，并返回一个指向该实例的fd，这个fd是后面epoll调用的方法参数。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int epoll_create(int size);int epoll_create1(int flags);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实现")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('static int do_epoll_create(int flags)\n{\n\tint error, fd;\n\tstruct eventpoll *ep = NULL;\n\tstruct file *file;\n\n\t/* Check the EPOLL_* constant for consistency.  */\n\tBUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);\n\n\tif (flags &amp; ~EPOLL_CLOEXEC)\n\t\treturn -EINVAL;\n\t/*\n\t * Create the internal data structure ("struct eventpoll").\n\t */\n\terror = ep_alloc(&amp;ep);\n\tif (error &lt; 0)\n\t\treturn error;\n\t/*\n\t * Creates all the items needed to setup an eventpoll file. That is,\n\t * a file structure and a free file descriptor.\n\t */\n\tfd = get_unused_fd_flags(O_RDWR | (flags &amp; O_CLOEXEC));\n\tif (fd &lt; 0) {\n\t\terror = fd;\n\t\tgoto out_free_ep;\n\t}\n\tfile = anon_inode_getfile("[eventpoll]", &amp;eventpoll_fops, ep,\n\t\t\t\t O_RDWR | (flags &amp; O_CLOEXEC));\n\tif (IS_ERR(file)) {\n\t\terror = PTR_ERR(file);\n\t\tgoto out_free_fd;\n\t}\n#ifdef CONFIG_NET_RX_BUSY_POLL\n\tep->busy_poll_usecs = 0;\n\tep->busy_poll_budget = 0;\n\tep->prefer_busy_poll = false;\n#endif\n\tep->file = file;\n\tfd_install(fd, file);\n\treturn fd;\n\nout_free_fd:\n\tput_unused_fd(fd);\nout_free_ep:\n\tep_clear_and_put(ep);\n\treturn error;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br")])]),n("h3",{attrs:{id:"epoll-ctl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll-ctl"}},[s._v("#")]),s._v(" epoll_ctl")]),s._v(" "),n("p",[s._v("epoll_ctl负责注册、修改、删除要监听的fd。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("epfd: epoll_create1返回的epfd")]),s._v(" "),n("li",[s._v("op:\n"),n("ul",[n("li",[s._v("EPOLL_CTL_ADD：注册新的要监听的fd")]),s._v(" "),n("li",[s._v("EPOLL_CTL_MOD: 修改fd对应的event类型")]),s._v(" "),n("li",[s._v("EPOLL_CTL_DEL: 删除监听的fd")])])])]),s._v(" "),n("p",[s._v("第三个参数是epoll_event，结构如下")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typedef union epoll_data {\n    void        *ptr;\n    int          fd;\n    uint32_t     u32;\n    uint64_t     u64;\n} epoll_data_t;\n\nstruct epoll_event {\n    uint32_t     events;      /* Epoll events */\n    epoll_data_t data;        /* User data variable */\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("epoll_event的events字段，是一个bit set，由如下bit字段配置")]),s._v(" "),n("ul",[n("li",[s._v("EPOLLIN：监听可读read事件")]),s._v(" "),n("li",[s._v("EPOLLOUT：监听可写write事件")]),s._v(" "),n("li",[s._v("EPOLLET：设置Edge Triggered模式")])]),s._v(" "),n("p",[s._v("epoll有两种模式，edge-triggered(ET)和level-triggered(LT)。\n默认epoll使用LT模式。\nET和LT的区别在于，如果一个读事件触发之后，如果数据还没有读完，则ET不会再触发只会通知一次。\n而LT只要有数据可读，下次epoll_wait依然会返回。")]),s._v(" "),n("h3",{attrs:{id:"epoll-wait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll-wait"}},[s._v("#")]),s._v(" epoll_wait")]),s._v(" "),n("p",[s._v("等待对应epoll fd的IO时间，可以制定超时时间，如果timeout设置-1则为无限等待；timeout设置为0不会等待，立刻返回并返回当前的事件。")]),s._v(" "),n("p",[s._v("方法返回之后，返回值int表示事件数量，事件会设置到传入的参数的"),n("code",[s._v("epoll_event *events")]),s._v("中。\nepoll_event中的data字段和epoll_ctl中设置的data是相同的。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int epoll_wait(int epfd, struct epoll_event *events,\n               int maxevents, int timeout);\nint epoll_pwait(int epfd, struct epoll_event *events,\n               int maxevents, int timeout,\n               const sigset_t *sigmask);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"内部实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部实现"}},[s._v("#")]),s._v(" 内部实现")]),s._v(" "),n("ul",[n("li",[s._v("epoll通过红黑树保存活跃的FD，红黑树保证插入、删除、查找操作时间复杂度O(log n)。")]),s._v(" "),n("li",[s._v("epoll_wait调用时，内核遍历红黑树将满足条件的FD添加到双链表中返回给用户空间")]),s._v(" "),n("li",[s._v("内核使用file structure中的poll回调函数来检测FD的状态变化，变化时，更新红黑树节点。")])]),s._v(" "),n("h2",{attrs:{id:"其他问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他问题"}},[s._v("#")]),s._v(" 其他问题")]),s._v(" "),n("h3",{attrs:{id:"epoll-file-descriptor本身也可以作为被epoll监听的对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll-file-descriptor本身也可以作为被epoll监听的对象"}},[s._v("#")]),s._v(" epoll file descriptor本身也可以作为被epoll监听的对象")]),s._v(" "),n("p",[s._v("如果epoll file descriptor有等待的事件，会变成readable产生可读事件。")]),s._v(" "),n("h3",{attrs:{id:"java中nio-selector是如何使用epoll的-linux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java中nio-selector是如何使用epoll的-linux"}},[s._v("#")]),s._v(" Java中NIO Selector是如何使用epoll的？(linux)")]),s._v(" "),n("p",[s._v("Selector通过ServiceLoader加载各自平台的SelectorProvider类，在linux中，实现是EPollSelectorProvider")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EPollSelectorProvider")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectorProviderImpl")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractSelector")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("openSelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EPollSelectorImpl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Channel")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("inheritedChannel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InheritedChannel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getChannel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("openSelector创建一个新的EPollSelectorImpl实例，实例中包含epfd字段。\npollArrayAddress是创建的接收epoll_event数组的指针。\nEventFD类型的eventfd字段用于实现wakeup，epfd默认会监控eventfd的读事件，需要wakeup时调用EventFD的set方法修改对应文件\n即可唤醒在epoll_wait中的Selector。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// epoll file descriptor\n    private final int epfd;\n\n    // address of poll array when polling with epoll_wait\n    private final long pollArrayAddress;\n\n    // eventfd object used for interrupt\n    private final EventFD eventfd;\n    \nEPollSelectorImpl(SelectorProvider sp) throws IOException {\n    super(sp);\n\n    this.epfd = EPoll.create();\n    this.pollArrayAddress = EPoll.allocatePollArray(NUM_EPOLLEVENTS);\n\n    try {\n        this.eventfd = new EventFD();\n        IOUtil.configureBlocking(IOUtil.newFD(eventfd.efd()), false);\n    } catch (IOException ioe) {\n        EPoll.freePollArray(pollArrayAddress);\n        FileDispatcherImpl.closeIntFD(epfd);\n        throw ioe;\n    }\n\n    // register the eventfd object for wakeups\n    EPoll.ctl(epfd, EPOLL_CTL_ADD, eventfd.efd(), EPOLLIN);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("doSelect方法")]),s._v(" "),n("ol",[n("li",[s._v("processUpdateQueue对最近通过setEventOps添加的updateKeys（由Selector的register调用），一次通过Epoll.ctl注册到epfd的监听")]),s._v(" "),n("li",[s._v("processDeregisterQueue处理删除的SelectionKey")]),s._v(" "),n("li",[s._v("然后再调用Epoll.wait，实现阻塞，如果有事件则返回。")]),s._v(" "),n("li",[s._v("通过processEvents调用事件处理函数进行事件处理。默认情况回调处理是将事件转换成SelectionKey（通过注册时记录的fd到Selectionkey的映射）加入到selectedKeys返回，然后通过Selector.selectedKeys方法就能获取到准备好的时间了。")])]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    @Override\n    protected int doSelect(Consumer&lt;SelectionKey> action, long timeout)\n        throws IOException\n    {\n        assert Thread.holdsLock(this);\n\n        // epoll_wait timeout is int\n        int to = (int) Math.min(timeout, Integer.MAX_VALUE);\n        boolean blocking = (to != 0);\n        boolean timedPoll = (to > 0);\n\n        int numEntries;\n        processUpdateQueue();\n        processDeregisterQueue();\n        try {\n            begin(blocking);\n\n            do {\n                long startTime = timedPoll ? System.nanoTime() : 0;\n                numEntries = EPoll.wait(epfd, pollArrayAddress, NUM_EPOLLEVENTS, to);\n                if (numEntries == IOStatus.INTERRUPTED &amp;&amp; timedPoll) {\n                    // timed poll interrupted so need to adjust timeout\n                    long adjust = System.nanoTime() - startTime;\n                    to -= TimeUnit.MILLISECONDS.convert(adjust, TimeUnit.NANOSECONDS);\n                    if (to &lt;= 0) {\n                        // timeout expired so no retry\n                        numEntries = 0;\n                    }\n                }\n            } while (numEntries == IOStatus.INTERRUPTED);\n            assert IOStatus.check(numEntries);\n\n        } finally {\n            end(blocking);\n        }\n        processDeregisterQueue();\n        return processEvents(numEntries, action);\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("p",[s._v("获取到event后，即可通过pollArrayAddress数组指针访问到数组中的epoll_event，拿到epoll_event中的fd(通过epoll_data再得到fd)。\n如果发现fd是用于interrupt的fd，则标记需要interrupt。\n其他的fd通过processReadyEvents方法回调处理函数。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private int processEvents(int numEntries, Consumer&lt;SelectionKey> action)\n        throws IOException\n    {\n        assert Thread.holdsLock(this);\n\n        boolean interrupted = false;\n        int numKeysUpdated = 0;\n        for (int i=0; i&lt;numEntries; i++) {\n            long event = EPoll.getEvent(pollArrayAddress, i);\n            int fd = EPoll.getDescriptor(event);\n            if (fd == eventfd.efd()) {\n                interrupted = true;\n            } else {\n                SelectionKeyImpl ski = fdToKey.get(fd);\n                if (ski != null) {\n                    int rOps = EPoll.getEvents(event);\n                    numKeysUpdated += processReadyEvents(rOps, ski, action);\n                }\n            }\n        }\n\n        if (interrupted) {\n            clearInterrupt();\n        }\n\n        return numKeysUpdated;\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h3",{attrs:{id:"为什么epoll不使用hashmap保存fd到epitem的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么epoll不使用hashmap保存fd到epitem的关系"}},[s._v("#")]),s._v(" 为什么epoll不使用hashmap保存fd到epitem的关系？")]),s._v(" "),n("p",[s._v("hashmap在hash冲突、扩容等情况下，可能导致较长耗时，不如红黑树稳定。")])])}),[],!1,null,null,null);e.default=a.exports}}]);