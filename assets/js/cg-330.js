(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{760:function(n,e,t){"use strict";t.r(e);var a=t(34),i=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"spring的依赖管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring的依赖管理"}},[n._v("#")]),n._v(" spring的依赖管理")]),n._v(" "),t("p",[n._v("ConcurrentHashSet singletonsCurrentlyInCreation")]),n._v(" "),t("p",[n._v("parentBeanFactory: spring中的beanFactory的parentBeanFactory的作用上什么？")]),n._v(" "),t("p",[n._v("ConcurrentHashMap<String, RootBeanDefinition> mergedBeanDefinitions: bean definition为什么需要merge？")]),n._v(" "),t("p",[n._v("创建（实例化）bean的过程中，是否会创建出新的bean?（对于spring的Configuration类的bean是这样的）")]),n._v(" "),t("h2",{attrs:{id:"beandefinition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition"}},[n._v("#")]),n._v(" BeanDefinition")]),n._v(" "),t("p",[n._v("GenericBeanDefinition\nRootBeanDefinition，有一个getParentName方案返回为null。")])])}),[],!1,null,null,null);e.default=i.exports}}]);