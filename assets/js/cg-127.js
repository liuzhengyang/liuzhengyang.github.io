(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{558:function(a,t,e){"use strict";e.r(t);var i=e(34),r=Object(i.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"dynamic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic"}},[a._v("#")]),a._v(" dynamic")]),a._v(" "),e("h2",{attrs:{id:"dynamic-rate-limit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-rate-limit"}},[a._v("#")]),a._v(" dynamic rate limit")]),a._v(" "),e("p",[a._v("保存旧的rate limit\n每次调用比较新旧limit，如果有变化，则生成新的limit并替换。")]),a._v(" "),e("h2",{attrs:{id:"dynamic-thread-pool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-thread-pool"}},[a._v("#")]),a._v(" dynamic thread pool")]),a._v(" "),e("p",[a._v("通过guava的"),e("code",[a._v("ForwardingExecutorService")]),a._v("实现delegate，每次delegate调用时检查线程数是否有变化，如果发生变化，\n则调整corePoolSize、maxPoolSize。")]),a._v(" "),e("h2",{attrs:{id:"dynamic-blocking-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-blocking-queue"}},[a._v("#")]),a._v(" dynamic blocking queue")]),a._v(" "),e("h2",{attrs:{id:"key-affinity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#key-affinity"}},[a._v("#")]),a._v(" key affinity")]),a._v(" "),e("p",[e("code",[a._v("Map<K, KeyRef>")]),a._v(": key和对应的affinity对象的映射，使用时，通过compute查询K是否有KeyRef，如果有直接使用；否则查找一个当前并发最小的KeyRef使用。使用前增加并发值。\n使用完成后，减小对应的并发值。")])])}),[],!1,null,null,null);t.default=r.exports}}]);