(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{482:function(e,t,i){"use strict";i.r(t);var r=i(34),l=Object(r.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"redis-bloom"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#redis-bloom"}},[e._v("#")]),e._v(" redis bloom")]),e._v(" "),i("p",[e._v("bloomfilter是一种判断元素是否存在的数据结构，它的特点是存在一定的假阳性（false positive）")]),e._v(" "),i("ul",[i("li",[e._v("当查询某一个元素是否存在，bloomfilter返回不存在时，那么这个元素一定不存在")]),e._v(" "),i("li",[e._v("当查询某一个元素是否存在，bloomfilter返回存在时，这个元素有较高的概率可能存在，在业务上需要做进一步判断处理")])]),e._v(" "),i("p",[e._v("redis原生没有bloomfilter功能，需要通过安装一个插件实现。")]),e._v(" "),i("p",[e._v("提供的API有")]),e._v(" "),i("ul",[i("li",[e._v("BF.ADD key item ： 添加一个元素到对应的key中。需要注意的是如果key不存在会抛出异常。这时需要先调用BF.insert创建")]),e._v(" "),i("li",[e._v("BF.MADD key item [item ...]：批量添加元素到key中。如果key不存在，会自动创建key，不抛出异常，相当于自动调用了BF.insert，但是error.rate、capacity、expansion等参数无法自定义设置。")]),e._v(" "),i("li",[e._v("BF.INSERT key [CAPACITY capacity] [ERROR error][EXPANSION expansion] [NOCREATE] [NONSCALING] ITEMS item [item ...]：创建一个bloomfilter key。")]),e._v(" "),i("li",[e._v("BF.EXISTS key item ：判断某一个元素是否在对应的key中")]),e._v(" "),i("li",[e._v("BF.MEXISTS key item [item ...] ：批量判断")]),e._v(" "),i("li",[e._v("BF.SCANDUMP key iterator：从bloomfilter中dump数据，第一次调用时iterator传0，后面根据上一次返回的iterator作为下一次参数进行循环遍历。")]),e._v(" "),i("li",[e._v("BF.LOADCHUNK key iterator data：和scandump反向的操作，用于向redis添加bf内部数据，数据来自于scandump。")])]),e._v(" "),i("p",[e._v("bloomfilter适用的场景有")]),e._v(" "),i("ul",[i("li",[e._v("信息列表推荐时，过滤掉用户已看过的信息")]),e._v(" "),i("li",[e._v("对于数据库查询的请求量优化")])])])}),[],!1,null,null,null);t.default=l.exports}}]);