(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{555:function(s,n,e){"use strict";e.r(n);var a=e(34),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"redis数据结构dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis数据结构dict"}},[s._v("#")]),s._v(" redis数据结构dict")]),s._v(" "),e("h2",{attrs:{id:"dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[s._v("#")]),s._v(" dict")]),s._v(" "),e("p",[s._v("redis中所有的kv数据都保存在一个字典dict(相当于Java里的HashMap)里。这个dict字典在很多设计上也和Java的HashMap接近，\ndict通过数组加链表的方式存储数据，数据超过一定阈值会进行扩容(rehash)，扩容时会通过新旧两个表的方式渐进式rehash避免长时间停顿。\ndict在redis中作为一种Map，除了存储用户缓存数据，还有非常多的使用场景比如存储所有的redis命令的映射信息。")]),s._v(" "),e("p",[s._v("下面是dict字典的定义(位于dict.h)。有两个dictEntry的table表（用于渐进式rehash，稍后讲解）\nht_size_exp字段保存dict的数组长度的指数值，redis的dict也像Java的HashMap一样，数组长度是2的指数倍，每次扩容2倍，这样的好处包含通过hash计算数组中的index只需要做&运算")]),s._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"picture 10","data-src":"/assets/images/redis/096debc63c42933683b84fbc7de96307ef6e2416e52b694967852ea7f3da9a9f.png",loading:"lazy"}})]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("struct dict {\n    // 类型\n    dictType *type;\n\n    // 两个hashtable，默认用0，rehash的时候会从0向1逐步转移数据\n    dictEntry **ht_table[2];\n    // 存储hashtable中写入了多少元素\n    unsigned long ht_used[2];\n\n    // rehashidx-1的时候说明没有在rehash\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n\n    // pauserehash用作暂停rehash的标识，在dictScan的时候会暂停rehash防止漏掉元素或者重复遍历元素\n    // 把int16_t的小的字段防止结构体最后来尽量优化结构体的padding，类似Java对象的8字节对齐\n    /* Keep small vars at end for optimal (minimal) struct padding */\n    int16_t pauserehash; /* If >0 rehashing is paused (<0 indicates coding error) */\n    // hashtable数组长度的2的指数值\n    signed char ht_size_exp[2]; /* exponent of size. (size = 1<<exp) */\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[s._v("数组链表中的链表元素定义为dictEntry，key指向entry的key，v中的val是value数据")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * dictEntry是dict字典中的链表元素\n */\ntypedef struct dictEntry {\n    // 字典key value的key\n    void *key;\n    union {\n        // value如果是复杂类型使用val指针指向真正的数据比如redisObject\n        void *val;\n\t// value如果是简单数据类型uint64,int64，double 分别用下面三种字段存储\n        uint64_t u64;\n        int64_t s64;\n        double d; \n    } v; // union结构\n    // 形成链表的next引用\n    struct dictEntry *next;     /* Next entry in the same hash bucket. */\n    void *metadata[];           /* An arbitrary number of bytes (starting at a\n                                 * pointer-aligned address) of size as returned\n                                 * by dictType's dictEntryMetadataBytes(). */\n} dictEntry;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("dictEntry->v->val指向的是一个redisObject对象，结构如下\ntype用来区分具体的对象类型（有OBJ_STRING,OBJ_LIST,OBJ_SET,OBJ_ZSET,OBJ_HASH等）\nencoding用来区分具体的编码，redis为了提升性能或节省内存会根据不同的情况选择合适的对象编码方式\nlru用作内存淘汰，如果是LRU保存的是最近访问时间，如果是LFU保存8bit的访问次数和16bit的访问时间\nrefcount引用计数\nptr指向真正的value对象")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("typedef struct redisObject {\n    unsigned type:4;\n    unsigned encoding:4;\n    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or\n                            * LFU data (least significant 8 bits frequency\n                            * and most significant 16 bits access time). */\n    int refcount;\n    void *ptr;\n} robj;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("dictType保存字典类型，不同的字段可以配置不同的hashFunction等函数。")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("typedef struct dictType {\n    uint64_t (*hashFunction)(const void *key);\n    void *(*keyDup)(dict *d, const void *key);\n    void *(*valDup)(dict *d, const void *obj);\n    int (*keyCompare)(dict *d, const void *key1, const void *key2);\n    void (*keyDestructor)(dict *d, void *key);\n    void (*valDestructor)(dict *d, void *obj);\n    int (*expandAllowed)(size_t moreMem, double usedRatio);\n    /* Allow a dictEntry to carry extra caller-defined metadata.  The\n     * extra memory is initialized to 0 when a dictEntry is allocated. */\n    size_t (*dictEntryMetadataBytes)(dict *d);\n} dictType;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h2",{attrs:{id:"dict添加元素的方法实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dict添加元素的方法实现"}},[s._v("#")]),s._v(" dict添加元素的方法实现")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * 向dict中添加元素，如果对应的key已经存在，返回DICT_ERR。能够覆盖key对应的value的方法是dictReplace\n */\n/* Add an element to the target hash table */\nint dictAdd(dict *d, void *key, void *val)\n{\n    // 先创建出对应的dictEntry\n    dictEntry *entry = dictAddRaw(d,key,NULL);\n\n    // 如果entry为NULL说明key已经存在返回DICT_ERR\n    if (!entry) return DICT_ERR;\n    // 调用dictSetVal把val设置到对应的entry中\n    dictSetVal(d, entry, val);\n    return DICT_OK;\n}\n/**\n * 向dict中添加entry，如果对应的key已经存在了，返回NULL，如果不存在返回创建的entry\n */\n/* Low level add or find:\n * This function adds the entry but instead of setting a value returns the\n * dictEntry structure to the user, that will make sure to fill the value\n * field as they wish.\n *\n * This function is also directly exposed to the user API to be called\n * mainly in order to store non-pointers inside the hash value, example:\n *\n * entry = dictAddRaw(dict,mykey,NULL);\n * if (entry != NULL) dictSetSignedIntegerVal(entry,1000);\n *\n * Return values:\n *\n * If key already exists NULL is returned, and "*existing" is populated\n * with the existing entry if existing is not NULL.\n *\n * If key was added, the hash entry is returned to be manipulated by the caller.\n */\ndictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)\n{\n    long index;\n    dictEntry *entry;\n    int htidx;\n\n    // 如果dict在rehash过程中，执行一步rehash step\n    if (dictIsRehashing(d)) _dictRehashStep(d);\n\n    // 获取对应key在数组中的index，如果key已经存在返回NULL\n    /* Get the index of the new element, or -1 if\n     * the element already exists. */\n    if ((index = _dictKeyIndex(d, key, dictHashKey(d,key), existing)) == -1)\n        return NULL;\n\n    /* Allocate the memory and store the new entry.\n     * Insert the element in top, with the assumption that in a database\n     * system it is more likely that recently added entries are accessed\n     * more frequently. */\n    // 如果在rehash过程中，写入到新table即index=1的table\n    htidx = dictIsRehashing(d) ? 1 : 0;\n    size_t metasize = dictMetadataSize(d);\n    // 分配内存\n    entry = zmalloc(sizeof(*entry) + metasize);\n    if (metasize > 0) {\n        memset(dictMetadata(entry), 0, metasize);\n    }\n    // 头插法，新创建的entry放到链表的表头，新创建的next指向原有的表头\n    entry->next = d->ht_table[htidx][index];\n    d->ht_table[htidx][index] = entry;\n    // hashtable used也就是元素数量加一\n    d->ht_used[htidx]++;\n\n    // 设置对应entry的key字段\n    /* Set the hash entry fields. */\n    dictSetKey(d, entry, key);\n    return entry;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br")])]),e("h2",{attrs:{id:"dict查找元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dict查找元素"}},[s._v("#")]),s._v(" dict查找元素")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * 在dict中查找对应key的entry\n */\ndictEntry *dictFind(dict *d, const void *key)\n{\n    dictEntry *he;\n    uint64_t h, idx, table;\n\n    // dict大小为0，说明dict中没有元素\n    if (dictSize(d) == 0) return NULL; /* dict is empty */\n    // 如果在rehash中，进行一次增量rehash\n    if (dictIsRehashing(d)) _dictRehashStep(d);\n    // 计算key的hash值\n    h = dictHashKey(d, key);\n    // 先查询旧table，如果旧table没有并且在rehash中则继续查新table\n    for (table = 0; table <= 1; table++) {\n        // 计算数组index\n        idx = h & DICTHT_SIZE_MASK(d->ht_size_exp[table]);\n        // 获取链表头节点\n        he = d->ht_table[table][idx];\n        // 遍历\n        while(he) {\n            // 判断是否是同一个key，类似java里的相同引用或equals\n            if (key==he->key || dictCompareKeys(d, key, he->key))\n                // 查找到则返回\n                return he;\n            // 继续遍历\n            he = he->next;\n        }\n        // 如果没有在rehash，则不需要查询index=1的table\n        if (!dictIsRehashing(d)) return NULL;\n    }\n    return NULL;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h2",{attrs:{id:"rehash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rehash"}},[s._v("#")]),s._v(" rehash")]),s._v(" "),e("p",[s._v("当dict中存入的元素比较多时，链表会变长，查找速度就会变慢，所以为了保证性能，dict需要增加数组长度来降低链表长度。")]),s._v(" "),e("p",[s._v("rehash触发时机: 默认情况下dict元素数量大于等于数组长度（特殊情况可以关闭扩容）")]),s._v(" "),e("p",[s._v("dictAdd方法会调用dictAddRaw，dictAddRaw中会调用_dictKeyIndex。\n_dictKeyIndex方法会调用_dictExpandIfNeeded来进行判断是否要扩容或初始化，如果需要进行扩容或初始化。")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * 按需进行初始化或扩容\n */\n/* Expand the hash table if needed */\nstatic int _dictExpandIfNeeded(dict *d)\n{\n    // 如果已经在rehash中了，返回\n    /* Incremental rehashing already in progress. Return. */\n    if (dictIsRehashing(d)) return DICT_OK;\n\n    // 如果table还没有初始化，则进行初始化\n    /* If the hash table is empty expand it to the initial size. */\n    if (DICTHT_SIZE(d->ht_size_exp[0]) == 0) return dictExpand(d, DICT_HT_INITIAL_SIZE);\n\n    // 如果table里的元素数量除以table数组长度大于阈值（默认5），并且这个dict对应的类型允许扩容，则进行扩容。\n    /* If we reached the 1:1 ratio, and we are allowed to resize the hash\n     * table (global setting) or we should avoid it but the ratio between\n     * elements/buckets is over the \"safe\" threshold, we resize doubling\n     * the number of buckets. */\n    if (d->ht_used[0] >= DICTHT_SIZE(d->ht_size_exp[0]) &&\n        (dict_can_resize ||\n         d->ht_used[0]/ DICTHT_SIZE(d->ht_size_exp[0]) > dict_force_resize_ratio) &&\n        dictTypeExpandAllowed(d))\n    {\n        return dictExpand(d, d->ht_used[0] + 1);\n    }\n    return DICT_OK;\n}\n/**\n * 扩容或创建hash table\n * 参数的size是新的hash table要能容纳的元素的数量，\n */\n/* Expand or create the hash table,\n * when malloc_failed is non-NULL, it'll avoid panic if malloc fails (in which case it'll be set to 1).\n * Returns DICT_OK if expand was performed, and DICT_ERR if skipped. */\nint _dictExpand(dict *d, unsigned long size, int* malloc_failed)\n{\n    if (malloc_failed) *malloc_failed = 0;\n\n    /* the size is invalid if it is smaller than the number of\n     * elements already inside the hash table */\n    if (dictIsRehashing(d) || d->ht_used[0] > size)\n        return DICT_ERR;\n\n    /* the new hash table */\n    dictEntry **new_ht_table;\n    unsigned long new_ht_used;\n    // 计算新的hash table的数组大小，是第一个大于等于size的2的指数倍的值，比如size=5，则new_ht_size_exp是8\n    signed char new_ht_size_exp = _dictNextExp(size);\n\n    // 检测越界的情况，发生在数组长度太大的情况\n    /* Detect overflows */\n    size_t newsize = 1ul<<new_ht_size_exp;\n    if (newsize < size || newsize * sizeof(dictEntry*) < newsize)\n        return DICT_ERR;\n\n    /* Rehashing to the same table size is not useful. */\n    if (new_ht_size_exp == d->ht_size_exp[0]) return DICT_ERR;\n\n    // 创建新的hash table并且初始化所有的指针为NULL\n    /* Allocate the new hash table and initialize all pointers to NULL */\n    if (malloc_failed) {\n        new_ht_table = ztrycalloc(newsize*sizeof(dictEntry*));\n        *malloc_failed = new_ht_table == NULL;\n        if (*malloc_failed)\n            return DICT_ERR;\n    } else\n        new_ht_table = zcalloc(newsize*sizeof(dictEntry*));\n\n    new_ht_used = 0;\n\n    // 第一次初始化的情况和扩容的区别在于扩容需要设置rehashidx=0开启rehash，并且赋值的table index不同。\n    /* Is this the first initialization? If so it's not really a rehashing\n     * we just set the first hash table so that it can accept keys. */\n    if (d->ht_table[0] == NULL) {\n        d->ht_size_exp[0] = new_ht_size_exp;\n        d->ht_used[0] = new_ht_used;\n        d->ht_table[0] = new_ht_table;\n        return DICT_OK;\n    }\n\n    // 保存新的table到index=1的位置，并且设置rehashidx=0开启rehash\n    /* Prepare a second hash table for incremental rehashing */\n    d->ht_size_exp[1] = new_ht_size_exp;\n    d->ht_used[1] = new_ht_used;\n    d->ht_table[1] = new_ht_table;\n    d->rehashidx = 0;\n    return DICT_OK;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br")])]),e("p",[s._v("rehash方法中包含了增量rehash的过程，在dict的增加查询等方法中都会判断如果当前是rehash中，进行一次增量rehash，同时也提供了dictRehashMilliseconds方法来实现一定时间的增量rehash。")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * 执行n此增量（渐进式）rehash。如果可能还有key要从旧table移动到新table则返回1，否则0\n * n表示迁移n个bucket（数组元素），空的数组元素不算。为了避免太多空元素阻塞较长时间，限制最多访问n*10个空元素\n *\n */\n/* Performs N steps of incremental rehashing. Returns 1 if there are still\n * keys to move from the old to the new hash table, otherwise 0 is returned.\n *\n * Note that a rehashing step consists in moving a bucket (that may have more\n * than one key as we use chaining) from the old to the new hash table, however\n * since part of the hash table may be composed of empty spaces, it is not\n * guaranteed that this function will rehash even a single bucket, since it\n * will visit at max N*10 empty buckets in total, otherwise the amount of\n * work it does would be unbound and the function may block for a long time. */\nint dictRehash(dict *d, int n) {\n    // 最多访问到10个空的bucket\n    int empty_visits = n*10; /* Max number of empty buckets to visit. */\n    // 如果rehashing已经结束，返回\n    if (!dictIsRehashing(d)) return 0;\n\n    // 执行n次或者直到旧table里已经没有元素\n    while(n-- && d->ht_used[0] != 0) {\n        // de是当前在移动的dictEntry,nextde是遍历链表用的next\n        dictEntry *de, *nextde;\n\n        /* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */\n        assert(DICTHT_SIZE(d->ht_size_exp[0]) > (unsigned long)d->rehashidx);\n        // 只要bucket是空的，就增加rehashidx移动到下一个bucket，如果总的遍历过的空bucket达到empty_visits，返回\n        while(d->ht_table[0][d->rehashidx] == NULL) {\n            d->rehashidx++;\n            if (--empty_visits == 0) return 1;\n        }\n        // 设置de为链表头\n        de = d->ht_table[0][d->rehashidx];\n        // 循环当前链表所有元素迁移到新table\n        /* Move all the keys in this bucket from the old to the new hash HT */\n        while(de) {\n            uint64_t h;\n            // 保存next\n            nextde = de->next;\n            // 计算当前entry的ke一种新table里的hash\n            /* Get the index in the new hash table */\n            h = dictHashKey(d, de->key) & DICTHT_SIZE_MASK(d->ht_size_exp[1]);\n            // 头插法插入到新table\n            de->next = d->ht_table[1][h];\n            d->ht_table[1][h] = de;\n            // 旧表元素数量减一\n            d->ht_used[0]--;\n            // 新表元素数量加1\n            d->ht_used[1]++;\n            // 替换de为nextde继续遍历\n            de = nextde;\n        }\n        // 清空旧table这个index的引用\n        d->ht_table[0][d->rehashidx] = NULL;\n        // 移动rehashidx到下一个位置\n        d->rehashidx++;\n    }\n\n    // 检查下旧table是不是已经迁移完成\n    /* Check if we already rehashed the whole table... */\n    if (d->ht_used[0] == 0) {\n        // 如果迁移完成，清理旧table内存\n        zfree(d->ht_table[0]);\n        // index=1的table换到index=0上\n        /* Copy the new ht onto the old one */\n        d->ht_table[0] = d->ht_table[1];\n        d->ht_used[0] = d->ht_used[1];\n        d->ht_size_exp[0] = d->ht_size_exp[1];\n        // 重置index=1的table的ht_table、ht_used、ht_size_exp\n        _dictReset(d, 1);\n        // rehashidx=-1表示rehash结束\n        d->rehashidx = -1;\n        return 0;\n    }\n\n    /* More to rehash... */\n    return 1;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);