(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{486:function(s,e,t){"use strict";t.r(e);var n=t(34),i=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"redis-zset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-zset"}},[s._v("#")]),s._v(" redis zset")]),s._v(" "),t("p",[s._v("redis的zset也称为有序集合(sorted set)是一个非常实用的数据结构，常用于列表、排序、榜单等场景。")]),s._v(" "),t("p",[s._v("zset可以想象成一个列表，列表的元素不会重复，然后每个元素会对应一个score值，zset使用这个score作为列表的顺序。\nzset提供了插入、查询、删除等操作接口。")]),s._v(" "),t("h2",{attrs:{id:"zset命令介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset命令介绍"}},[s._v("#")]),s._v(" zset命令介绍")]),s._v(" "),t("ul",[t("li",[s._v("zadd - 向zset中插入一个元素，传入member（字符串）和score（double)。操作时间复杂度O(log(n))")]),s._v(" "),t("li",[s._v("zscore - 传入member(字符串)查询对应的member的score值，如果没有返回null。操作时间复杂度O(1)")]),s._v(" "),t("li",[s._v("zrangebyscore - 按照score查询一定范围内的所有元素，按照score从小到大返回，可以传入limit和offset可选参数实现翻页效果")]),s._v(" "),t("li",[s._v("zrevrangebyscore - 按照score查询一定范围内的元素，不过是按照score从大到小返回")]),s._v(" "),t("li",[s._v("zrank - 查询指定element元素的rank排序值")])]),s._v(" "),t("h2",{attrs:{id:"zset应用场景、注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset应用场景、注意事项"}},[s._v("#")]),s._v(" zset应用场景、注意事项")]),s._v(" "),t("p",[s._v("score的精度问题")]),s._v(" "),t("h2",{attrs:{id:"redis的zset实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis的zset实现原理"}},[s._v("#")]),s._v(" redis的zset实现原理")]),s._v(" "),t("p",[s._v("在zset中元素数量小于等于128个时，zset会使用listpack结构也就是紧凑列表的方式，把member和score连续放到列表中，\n当元素数量超过128个时，会通过skiplist跳表的结构存储。\n另外zset还会使用map结构存储member到score的映射。")]),s._v(" "),t("p",[s._v("listpack\nskiplist")]),s._v(" "),t("h3",{attrs:{id:"ziplist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ziplist"}},[s._v("#")]),s._v(" ziplist")]),s._v(" "),t("p",[s._v("当zset中条目数量小于等于128并且每个member的字符长度小于等于64时，会使用ziplist压缩列表的方式存储。\n对于小数据量的情况更加节省内存。")]),s._v(" "),t("p",[s._v("ziplist的内存布局为")]),s._v(" "),t("ul",[t("li",[s._v("zlbytes：表示当前ziplist总的bytes大小，包含zlbytes自身的4byte。")]),s._v(" "),t("li",[s._v("zltail: 最后一个元素的offset，便于pop操作。")]),s._v(" "),t("li",[s._v("zllen：list元素数量")]),s._v(" "),t("li",[s._v("zlend：ziplist end的特殊entry。")]),s._v(" "),t("li",[s._v("entry：每个元素")])]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("&lt;zlbytes> &lt;zltail> &lt;zllen> &lt;entry> &lt;entry> ... &lt;entry> &lt;zlend>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("每个entry的格式，保存prevlen(byte数量）目的是用于从后向前查找。然后是encoding，表示entry类型包含integer和string两种，如果是string还表示字符串的长度。")]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("&lt;prevlen> &lt;encoding> &lt;entry-data>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"skiplist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#skiplist"}},[s._v("#")]),s._v(" skiplist")]),s._v(" "),t("p",[s._v("跳跃表模式下，zset包含一个dict字典和zskiplist。\ndict的key是element，value是score。能够用于实现getscore。\nzskiplist调表，按照score进行排序（score相同时按照key的字典序排序）。")]),s._v(" "),t("img",{attrs:{src:"/assets/images/redis/redis-skiplist.png",height:"300"}}),s._v(" "),t("p",[s._v("zskiplistNode是列表每个Node的定义。\nNode中包含level数组，每个Level表示每一层的数据。\nNode通过backward指针用于向后的查找遍历。\nlevel通过forward指针指向下一个同层的Node。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("/* ZSETs use a specialized version of Skiplists */\ntypedef struct zskiplistNode {\n    sds ele;\n    double score;\n    struct zskiplistNode *backward;\n    struct zskiplistLevel {\n        struct zskiplistNode *forward;\n        unsigned long span;\n    } level[];\n} zskiplistNode;\n\ntypedef struct zskiplist {\n    struct zskiplistNode *header, *tail;\n    unsigned long length;\n    int level;\n} zskiplist;\n\ntypedef struct zset {\n    dict *dict;\n    zskiplist *zsl;\n} zset;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])])])}),[],!1,null,null,null);e.default=i.exports}}]);