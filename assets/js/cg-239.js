(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{669:function(s,e,t){"use strict";t.r(e);var n=t(34),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"coroutinesupport"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coroutinesupport"}},[s._v("#")]),s._v(" CoroutineSupport")]),s._v(" "),t("ul",[t("li",[s._v("Thread thread: CoroutineSupport对应的线程")]),s._v(" "),t("li",[s._v("Coroutine threadCoroutine: 当前线程要运行的初始的协程")]),s._v(" "),t("li",[s._v("Coroutine currentCoroutine: 当前正在执行的coroutine")]),s._v(" "),t("li",[s._v("Thread lockOwner:")]),s._v(" "),t("li",[s._v("int lockRecursive:")]),s._v(" "),t("li",[s._v("int id: id")])]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class CoroutineSupport {\n\n    private static final boolean CHECK_LOCK = true;\n    private static final int SPIN_BACKOFF_LIMIT = 2 &lt;&lt; 8;\n\n    private static AtomicInteger idGen = new AtomicInteger();\n\n    // The thread that this CoroutineSupport belongs to. There\'s only one CoroutineSupport per Thread\n    private final Thread thread;\n    // The initial coroutine of the Thread\n    private final Coroutine threadCoroutine;\n\n    // The currently executing coroutine\n    private Coroutine currentCoroutine;\n\n    private volatile Thread lockOwner = null; // also protect double link list of JavaThread->coroutine_list()\n    private int lockRecursive; // volatile is not need\n\n    private final int id;\n    private boolean terminated = false;\n\n    static {\n        registerNatives();\n    }\n\n    /**\n     * Allocates a new {@code CoroutineSupport} object.\n     *\n     * @param thread the Thread\n     */\n    public CoroutineSupport(Thread thread) {\n        if (thread.getCoroutineSupport() != null) {\n            throw new IllegalArgumentException("Cannot instantiate CoroutineThreadSupport for existing Thread");\n        }\n        id = idGen.incrementAndGet();\n        this.thread = thread;\n        threadCoroutine = new Coroutine(this, getNativeThreadCoroutine());\n        markThreadCoroutine(threadCoroutine.nativeCoroutine, threadCoroutine);\n        currentCoroutine = threadCoroutine;\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br")])]),t("h3",{attrs:{id:"switchto"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#switchto"}},[s._v("#")]),s._v(" switchTo")]),s._v(" "),t("p",[s._v("switchTo方法是切换执行的协程的native方法，方法签名上有"),t("code",[s._v("@HotSpotIntrinsicCandidate")]),s._v("，这个注解表示\n会由jdk会生成更加高效的代码，比如通过汇编实现。")]),s._v(" "),t("blockquote",[t("p",[s._v('The @HotSpotIntrinsicCandidate annotation is specific to the HotSpot Virtual Machine. It indicates that an annotated method may be (but is not guaranteed to be) intrinsified by the HotSpot VM. A method is intrinsified if the HotSpot VM replaces the annotated method with hand-written assembly and/or hand-written compiler IR -- a compiler intrinsic -- to improve performance. The @HotSpotIntrinsicCandidate annotation is internal to the Java libraries and is therefore not supposed to have any relevance for application code."')])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@HotSpotIntrinsicCandidate")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("switchTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CoroutineBase")]),s._v(" current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CoroutineBase")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("方法的代码实现在sharedRuntime_x86_64.cpp中的create_switchTo_contents方法里")]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('void create_switchTo_contents(MacroAssembler *masm, int start, OopMapSet* oop_maps, int &amp;stack_slots, int total_in_args,\n                              BasicType *in_sig_bt, VMRegPair *in_regs, BasicType ret_type, bool terminate) {\n  assert(total_in_args == 2, "wrong number of arguments");\n\n  if (j_rarg0 != rsi) {\n    __ movptr(rsi, j_rarg0);\n  }\n  if (j_rarg1 != rdx) {\n    __ movptr(rdx, j_rarg1);\n  }\n\n  // push the current IP and frame pointer onto the stack\n  __ push(rbp);\n\n  Register thread = r15;\n  Register target_coroutine = rdx;\n  // check that we\'re dealing with sane objects...\n  DEBUG_ONLY(stop_if_null(masm, target_coroutine, "null new_coroutine"));\n  __ movptr(target_coroutine, Address(target_coroutine, java_dyn_CoroutineBase::get_data_offset()));\n  DEBUG_ONLY(stop_if_null(masm, target_coroutine, "new_coroutine without data"));\n\n/*\n#ifdef ASSERT\n#undef __\n#define __ debug_line(masm, __LINE__)->\n#endif\n*/\n  {\n    //////////////////////////////////////////////////////////////////////////\n    // store information into the old coroutine\'s object\n    //\n    // valid registers: rsi = old Coroutine, rdx = target Coroutine\n\n    Register old_coroutine_obj = rsi;\n    Register old_coroutine = r9;\n    Register old_stack = r10;\n    Register temp = r8;\n\n    // check that we\'re dealing with sane objects...\n    DEBUG_ONLY(stop_if_null(masm, old_coroutine_obj, "null old_coroutine"));\n    __ movptr(old_coroutine, Address(old_coroutine_obj, java_dyn_CoroutineBase::get_data_offset()));\n    DEBUG_ONLY(stop_if_null(masm, old_coroutine, "old_coroutine without data"));\n    __ movptr(old_stack, Address(old_coroutine, Coroutine::stack_offset()));\n\n#if defined(_WINDOWS)\n    // rescue the SEH pointer\n    __ prefix(Assembler::GS_segment);\n    __ movptr(temp, Address(noreg, 0x00));\n    __ movptr(Address(old_coroutine, Coroutine::last_SEH_offset()), temp);\n#endif\n\n    __ movl(Address(old_coroutine, Coroutine::state_offset()) , Coroutine::_onstack);\n\n    // rescue old handle and resource areas\n    __ movptr(temp, Address(thread, Thread::handle_area_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::handle_area_offset()), temp);\n    __ movptr(temp, Address(thread, Thread::resource_area_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::resource_area_offset()), temp);\n    __ movptr(temp, Address(thread, Thread::last_handle_mark_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::last_handle_mark_offset()), temp);\n    __ movptr(temp, Address(thread, Thread::active_handles_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::active_handles_offset()), temp);\n    __ movptr(temp, Address(thread, Thread::metadata_handles_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::metadata_handles_offset()), temp);\n    __ movptr(temp, Address(thread, JavaThread::last_Java_pc_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::last_Java_pc_offset()), temp);\n    __ movptr(temp, Address(thread, JavaThread::last_Java_sp_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::last_Java_sp_offset()), temp);\n    __ movptr(temp, Address(thread, JavaThread::privileged_stack_top_offset()));\n    __ movptr(Address(old_coroutine, Coroutine::privileged_stack_top_offset()), temp);\n    __ movptr(temp, Address(thread, JavaThread::threadObj_offset()));\n    __ movl(temp, Address(temp, java_lang_Thread::thread_status_offset()));\n    __ movl(Address(old_coroutine, Coroutine::thread_status_offset()), temp);\n    __ movl(temp, Address(thread, JavaThread::java_call_counter_offset()));\n    __ movl(Address(old_coroutine, Coroutine::java_call_counter_offset()), temp);\n\n    __ movptr(Address(old_stack, CoroutineStack::last_sp_offset()), rsp);\n  }\n  Register target_stack = r12;\n  __ movptr(target_stack, Address(target_coroutine, Coroutine::stack_offset()));\n\n  {\n    //////////////////////////////////////////////////////////////////////////\n    // perform the switch to the new stack\n    //\n    // valid registers: rdx = target Coroutine\n\n    __ movl(Address(target_coroutine, Coroutine::state_offset()), Coroutine::_current);\n\n    Register temp = r8;\n    Register temp2 = r9;\n    {\n      Register thread = r15;\n      __ movptr(Address(thread, JavaThread::current_coroutine_offset()), target_coroutine);\n      // set new handle and resource areas\n      __ movptr(temp, Address(target_coroutine, Coroutine::handle_area_offset()));\n      __ movptr(Address(thread, Thread::handle_area_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::resource_area_offset()));\n      __ movptr(Address(thread, Thread::resource_area_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::last_handle_mark_offset()));\n      __ movptr(Address(thread, Thread::last_handle_mark_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::active_handles_offset()));\n      __ movptr(Address(thread, Thread::active_handles_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::metadata_handles_offset()));\n      __ movptr(Address(thread, Thread::metadata_handles_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::last_Java_pc_offset()));\n      __ movptr(Address(thread, JavaThread::last_Java_pc_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::last_Java_sp_offset()));\n      __ movptr(Address(thread, JavaThread::last_Java_sp_offset()), temp);\n      __ movptr(temp, Address(target_coroutine, Coroutine::privileged_stack_top_offset()));\n      __ movptr(Address(thread, JavaThread::privileged_stack_top_offset()), temp);\n      __ movl(temp2, Address(target_coroutine, Coroutine::thread_status_offset()));\n      __ movptr(temp, Address(thread, JavaThread::threadObj_offset()));\n      __ movl(Address(temp, java_lang_Thread::thread_status_offset()), temp2);\n      __ movl(temp, Address(target_coroutine, Coroutine::java_call_counter_offset()));\n      __ movl(Address(thread, JavaThread::java_call_counter_offset()), temp);\n#ifdef ASSERT\n      __ movptr(Address(target_coroutine, Coroutine::handle_area_offset()), (intptr_t)NULL_WORD);\n      __ movptr(Address(target_coroutine, Coroutine::resource_area_offset()), (intptr_t)NULL_WORD);\n      __ movptr(Address(target_coroutine, Coroutine::last_handle_mark_offset()), (intptr_t)NULL_WORD);\n      __ movl(Address(target_coroutine, Coroutine::java_call_counter_offset()), 0);\n#endif\n\n      // update the thread\'s stack base and size\n      __ movptr(temp, Address(target_stack, CoroutineStack::stack_base_offset()));\n      __ movptr(Address(thread, JavaThread::stack_base_offset()), temp);\n      __ movl(temp2, Address(target_stack, CoroutineStack::stack_size_offset()));\n      __ movl(Address(thread, JavaThread::stack_size_offset()), temp2);\n\n      __ movptr(temp2, Address(target_stack, CoroutineStack::stack_overflow_limit_offset()));\n      __ movptr(Address(thread, JavaThread::stack_overflow_limit_offset()), temp2);\n\n      // update JavaThread::_reserved_stack_activation for @ReservedStackAccess support\n      __ movptr(Address(thread, JavaThread::reserved_stack_activation_offset()), temp);\n    }\n#if defined(_WINDOWS)\n    {\n      Register tib = rax;\n      // get the linear address of the TIB (thread info block)\n      __ prefix(Assembler::GS_segment);\n      __ movptr(tib, Address(noreg, 0x30));\n\n      // update the TIB stack base and top\n      __ movptr(Address(tib, 0x8), temp);\n      __ subptr(temp, temp2);\n      __ movptr(Address(tib, 0x10), temp);\n\n      // exchange the TIB structured exception handler pointer\n      __ movptr(temp, Address(target_coroutine, Coroutine::last_SEH_offset()));\n      __ movptr(Address(tib, 0), temp);\n    }\n#endif\n    // restore the stack pointer\n    __ movptr(temp, Address(target_stack, CoroutineStack::last_sp_offset()));\n    __ movptr(rsp, temp);\n\n    __ pop(rbp);\n\n    __ int3();\n\n    if (!terminate) {\n      //////////////////////////////////////////////////////////////////////////\n      // normal case (resume immediately)\n\n      // this will reset r12\n      __ reinit_heapbase();\n\n      Label normal;\n      __ lea(rcx, RuntimeAddress((unsigned char*)coroutine_start));\n      __ cmpq(Address(rsp, 0), rcx);\n      __ jcc(Assembler::notEqual, normal);\n\n      __ movq(c_rarg0, Address(rsp, HeapWordSize * 2));\n      __ movq(c_rarg1, Address(rsp, HeapWordSize * 3));\n\n      __ bind(normal);\n\n      __ ret(0);        // &lt;-- this will jump to the stored IP of the target coroutine\n\n    } else {\n      //////////////////////////////////////////////////////////////////////////\n      // slow case (terminate old coroutine)\n\n      // this will reset r12\n      __ reinit_heapbase();\n\n      if (j_rarg0 != rsi) {\n        __ movptr(j_rarg0, rsi);\n      }\n      __ movptr(j_rarg1, 0);\n    }\n  }\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br"),t("span",{staticClass:"line-number"},[s._v("185")]),t("br"),t("span",{staticClass:"line-number"},[s._v("186")]),t("br"),t("span",{staticClass:"line-number"},[s._v("187")]),t("br"),t("span",{staticClass:"line-number"},[s._v("188")]),t("br"),t("span",{staticClass:"line-number"},[s._v("189")]),t("br"),t("span",{staticClass:"line-number"},[s._v("190")]),t("br"),t("span",{staticClass:"line-number"},[s._v("191")]),t("br"),t("span",{staticClass:"line-number"},[s._v("192")]),t("br"),t("span",{staticClass:"line-number"},[s._v("193")]),t("br"),t("span",{staticClass:"line-number"},[s._v("194")]),t("br")])]),t("h3",{attrs:{id:"函数调用、cpu架构的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数调用、cpu架构的关系"}},[s._v("#")]),s._v(" 函数调用、cpu架构的关系")]),s._v(" "),t("h4",{attrs:{id:"_16个通用寄存器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16个通用寄存器"}},[s._v("#")]),s._v(" 16个通用寄存器")]),s._v(" "),t("ul",[t("li",[s._v("rax: 累加器，存储返回值")]),s._v(" "),t("li",[s._v("rax: 累加器，存储返回值")]),s._v(" "),t("li",[s._v("rbx: 基址寄存器，被调用者保存")]),s._v(" "),t("li",[s._v("rcx: 计数寄存器")]),s._v(" "),t("li",[s._v("rdx: I/O指针")]),s._v(" "),t("li",[s._v("rsi(source index): 函数调用时的第2个参数")]),s._v(" "),t("li",[s._v("rdi(destination index): 函数调用时的第1个参数")]),s._v(" "),t("li",[s._v("rbp(base pointer): 基地指针寄存器")]),s._v(" "),t("li",[s._v("rsp(stack pointer): 栈顶指针寄存器")]),s._v(" "),t("li",[s._v("r8: 函数调用的第五个参数")]),s._v(" "),t("li",[s._v("r9: 函数调用时的第六个参数")])]),s._v(" "),t("p",[s._v("参考文章")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.holbertonschool.com/hack-virtual-memory-stack-registers-assembly-code/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hack the virtual memory: the stack, registers and assembly code"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://cs.brown.edu/courses/csci1310/2020/notes/l08.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://cs.brown.edu/courses/csci1310/2020/notes/l08.html"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://cs61.seas.harvard.edu/site/2018/Asm1/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://cs61.seas.harvard.edu/site/2018/Asm1/"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);