(window.webpackJsonp=window.webpackJsonp||[]).push([[331],{762:function(n,e,a){"use strict";a.r(e);var s=a(34),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"spring-bean循环依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean循环依赖"}},[n._v("#")]),n._v(" spring bean循环依赖")]),n._v(" "),a("p",[n._v("理想的层级架构下，高层级的bean应该只依赖低层级的bean，比如service依赖dao。\n但是在开发过程中，并不能保证，这时就可能出现循环依赖的情况。\n比如下面的例子")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Service")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ServiceA")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Autowired")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ServiceB")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Service")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ServiceB")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Autowired")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ServiceA")]),n._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("spring默认支持这种循环依赖，那么spring是如何实现的呢？\n难点在于，在创建A的bean的过程中，需要注入B的对象作为字段。这时会触发B的创建，\n但是创建B的时候，又需要注入A的依赖，而此时A正在创建中，出现死锁。")]),n._v(" "),a("p",[n._v("spring的实现思路是，在创建bean之前，把当前bean加到正在创建的集合中用来识别循环引用的情况。完成bean实例的创建后，将bean保存到一个映射中（实际是保存的获取bean的方法，因为可能有PostProcessor对象进行替换)。\n创建完bean实例，然后为bean设置字段时，这里需要创建依赖的bean。\n比如创建bean A时，创建bean B。\n然后在创建依赖的bean B的过程中，如果bean B的字段中又依赖了bean A，spring在调用getSingleton时，singletonObjects中不包含bean A，因为A还没有完成创建，\n没有加入到singletonObjects中。\n然后判断A是否在创建中，是在set集合中查找，能找到。然后加锁并且在earlySingletonObjects查找A，这个map是用于保存提前暴露的bean的实例。\n如果这个map中已经存在A，说明前面已经有其他的循环依赖A的bean完成过创建，则使用earlySingletonObjects中的A对象。\n否则从singletonFactories中去找A的ObjectFactory即获取A对象的方法，找到后调用生成singletonObject然后放到earlySingletonObjects中，并且从singletonFactories中删除此ObjectFactory。\n这样bean B就获取到了bean A的对象，使得B能够完成bean创建。\nbean B创建完成后，bean A继续执行创建过程注入bean B对象，由此就完成了循环依赖的实现。")]),n._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("protected Object getSingleton(String beanName, boolean allowEarlyReference) {\n    Object singletonObject = this.singletonObjects.get(beanName);\n    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) {\n        synchronized (this.singletonObjects) {\n            singletonObject = this.earlySingletonObjects.get(beanName);\n            if (singletonObject == null &amp;&amp; allowEarlyReference) {\n                ObjectFactory&lt;?> singletonFactory = this.singletonFactories.get(beanName);\n                if (singletonFactory != null) {\n                    singletonObject = singletonFactory.getObject();\n                    this.earlySingletonObjects.put(beanName, singletonObject);\n                    this.singletonFactories.remove(beanName);\n                }\n            }\n        }\n    }\n    return singletonObject;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[n._v("前面看到的singletonFactories里的ObjectFactory实现是")]),n._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// Eagerly cache singletons to be able to resolve circular references\n// even when triggered by lifecycle interfaces like BeanFactoryAware.\nboolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;\n        isSingletonCurrentlyInCreation(beanName));\nif (earlySingletonExposure) {\n    if (logger.isTraceEnabled()) {\n        logger.trace("Eagerly caching bean \'" + beanName +\n                "\' to allow for resolving potential circular references");\n    }\n    addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n}\n\n// ...\n\nprotected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) {\n    Object exposedObject = bean;\n    if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) {\n        for (BeanPostProcessor bp : getBeanPostProcessors()) {\n            if (bp instanceof SmartInstantiationAwareBeanPostProcessor) {\n                SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;\n                exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);\n            }\n        }\n    }\n    return exposedObject;\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("p",[n._v("可以看到singleFactory的实现是"),a("code",[n._v("() -> getEarlyBeanReference")]),n._v("，而getEarlyBeanReference方法\n通过SmartInstantiationAwareBeanPostProcessor对bean进行了getEarlyBeanReference处理。\n目前已有的实现是AbstractAutoProxyCreator即AOP创建代理的过程。\nAbstractAutoProxyCreator在这里为bean对象创建aop代理。")]),n._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public abstract class AbstractAutoProxyCreator {\n    @Override\n\tpublic Object getEarlyBeanReference(Object bean, String beanName) {\n\t\tObject cacheKey = getCacheKey(bean.getClass(), beanName);\n\t\tthis.earlyProxyReferences.put(cacheKey, bean);\n\t\treturn wrapIfNecessary(bean, beanName, cacheKey);\n\t}\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("疑问：为什么提前暴露的bean实例不妨到singletonObjects中而是用了一个临时的earlySingletonObjects？")]),n._v(" "),a("h2",{attrs:{id:"什么情况下spring会抛出循环依赖异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下spring会抛出循环依赖异常"}},[n._v("#")]),n._v(" 什么情况下spring会抛出循环依赖异常？")]),n._v(" "),a("p",[n._v("不是所有的循环依赖都能解决。\n如果两个bean互相通过构造函数依赖对方，出现循环依赖，则spring会抛出异常。\n这是因为构造函数执行完之前，是获取不到bean对象的，没法像字段依赖那样提前暴露未完成spring初始化的bean对象。")])])}),[],!1,null,null,null);e.default=t.exports}}]);